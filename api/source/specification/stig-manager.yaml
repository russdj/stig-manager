openapi: 3.0.1
info:
  title: STIG Manager API
  description: >-
    An API for managing evaluations of Security Technical Implementation Guide
    (STIG) assessments.
  contact:
    name: Carl Smigielski
    email: carl.a.smigielski@saic.com
  version: 'v1'
servers:
  - url: 'http://localhost:64001/api'
paths:
  /assets:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetProjectionQuery'
    get:
      tags:
        - Asset
      summary: Return a list of Assets accessible to the requester
      operationId: getAssets
      parameters:
        - name: collectionId
          required: true
          in: query
          description: Selects Assets mapped to a Collection
          schema:
            type: string
        - $ref: '#/components/parameters/NameQuery'
        - $ref: '#/components/parameters/NameMatchQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - name: benchmarkId
          in: query
          description: Selects Assets mapped to a STIG
          schema:
            type: string
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Asset
      summary: Create an Asset
      operationId: createAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateOrReplace'
      responses:
        '201':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        '400':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorDuplicateAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/AssetProjectionQuery'
    get:
      tags:
        - Asset
      summary: Return an Asset
      operationId: getAsset
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Asset
      summary: Merge provided properties with an Asset
      operationId: updateAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Asset
      summary: Set all properties of an Asset
      operationId: replaceAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateOrReplace'
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete an Asset
      operationId: deleteAsset
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/checklists':
    parameters:
      - name: assetId
        in: path
        description: A path parameter that identifies an Asset
        required: true
        schema:
          type: string
      - name: benchmarkId
        in: query
        description: Identifies a STIG. Default is all mapped STIGs.
        schema:
          type: array
          items:
            type: string
    get:
      tags:
        - Asset
      summary: Return a multi-STIG CKL for an Asset and its mapped STIGs
      operationId: getChecklistByAsset
      # parameters:
      # - name: format
      #   in: query
      #   description: The format of the response. Default if missing is 'json'
      #   schema:
      #     type: string
      #     default: json
      #     enum:
      #       - json
      #       - ckl
      responses:
        '200':
          description: Review response
          content:
            # application/json:
            #   schema:
            #     type: array
            #     items:
            #       $ref: '#/components/schemas/ChecklistAssetStigs'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChecklistCkl'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/checklists/{benchmarkId}/{revisionStr}':
    parameters:
      - name: assetId
        in: path
        description: A path parameter that identifies an Asset
        required: true
        schema:
          type: string
      - name: benchmarkId
        in: path
        description: A path parameter that identifies a STIG
        required: true
        schema:
          type: string
      - name: revisionStr
        in: path
        description: >-
          A path parameter that identifies a STIG revision [
          V{version_num}R{release_num} | 'latest' ]
        required: true
        schema:
          pattern: ^(V\d+R\d+(\.\d+)?|latest)$
          type: string
    get:
      tags:
        - Asset
      summary: Return JSON or a CKL file for an Asset and STIG
      operationId: getChecklistByAssetStig
      parameters:
        - name: format
          in: query
          description: The format of the response. Default if missing is 'json'
          schema:
            type: string
            default: json
            enum:
              - json
              - ckl
      responses:
        '200':
          description: Review response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistAssetStig'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChecklistCkl'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/metadata':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return the metadata for Asset
      operationId: getAssetMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Asset
      summary: Merge the provided object to a Assetmetadata
      operationId: patchAssetMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Asset
      summary: Set a Asset metadata to the provided object
      operationId: putAssetMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return the keys of the provided Asset's metadata
      operationId: getAssetMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/assets/{assetId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Asset
      summary: Return the value of the provided Asset metadata key
      operationId: getAssetMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Asset
      summary: Set the value of the provided Asset metadata key to the provided string
      operationId: putAssetMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Remove the provided Asset metadata key
      operationId: deleteAssetMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/stigs':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
    get:
      tags:
        - Asset
      summary: Return an Asset's STIG assignments
      operationId: getStigsByAsset
      responses:
        '200':
          description: STIGs response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIGs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    # put:
    #   tags:
    #     - Asset
    #   summary: UNIMPLEMENTED Set all the STIG assignments of an Asset
    #   operationId: attachStigsToAsset
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: array
    #           minItems: 1
    #           items:
    #             type: string
    #   responses:
    #     '200':
    #       description: AssetProjected response
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/AssetProjected'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete all STIG assignments to an Asset
      operationId: removeStigsFromAsset
      responses:
        '200':
          description: AssetStigs response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIGs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/stigs/{benchmarkId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
    put:
      tags:
        - Asset
      summary: Assign a STIG to an Asset
      operationId: attachStigToAsset
      responses:
        '200':
          description: STIGs response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIGs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Asset
      summary: Delete a STIG assignment to an Asset
      operationId: removeStigFromAsset
      responses:
        '200':
          description: AssetProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIGs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/assets/{assetId}/stigs/{benchmarkId}/users':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
    # get:
    #   tags:
    #     - Asset
    #   summary: >-
    #     Return accessLevel = 1 Users granted access to this STIG-Asset
    #     combination
    #   operationId: getAssetStigGrants
    #   responses:
    #     '200':
    #       description: STIGs response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/UserBasic'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection:read'
    # put:
    #   tags:
    #     - Asset
    #   summary: >-
    #     UNIMPLEMENTED Set all the accessLevel = 1 Users granted access to this
    #     STIG-Asset combination
    #   operationId: setAssetStigGrants
    #   responses:
    #     '200':
    #       description: AssetProjected response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               description: >-
    #                 A List of userIds with accessLevel 1 on the Asset's
    #                 Collection
    #               type: string
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
    # delete:
    #   tags:
    #     - Asset
    #   summary: >-
    #     UNIMPLEMENTED Revoke all accessLevel = 1 User access to this STIG-Asset
    #     combination
    #   operationId: deleteAssetStigGrants
    #   responses:
    #     '200':
    #       description: AssetProjected response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/UserBasic'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
  '/assets/{assetId}/stigs/{benchmarkId}/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
      - $ref: '#/components/parameters/UserIdPath'
    # put:
    #   tags:
    #     - Asset
    #   summary: >-
    #     UNIMPLEMENTED Grant an accessLevel = 1 User access to a STIG-Asset
    #     combination
    #   operationId: setAssetStigGrant
    #   responses:
    #     '200':
    #       description: AssetProjected response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/UserBasic'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
    # delete:
    #   tags:
    #     - Asset
    #   summary: >-
    #     UNIMPLEMENTED Revoke an accessLevel = 1 User's access to a STIG-Asset
    #     combination
    #   operationId: deleteAssetStigGrant
    #   responses:
    #     '200':
    #       description: AssetProjected response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/UserBasic'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #   security:
    #     - oauth:
    #         - 'stig-manager:collection'
  /collections:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      # - $ref: '#/components/parameters/CollectionsProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return a list of Collections accessible to the requester
      description: ''
      operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/NameQuery'
        - $ref: '#/components/parameters/NameMatchQuery'
        - $ref: '#/components/parameters/CollectionWorkflowQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/CollectionsProjectionQuery'
      responses:
        '200':
          description: CollectionsProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionsProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Collection
      summary: Create a Collection
      description: ''
      operationId: createCollection
      parameters:
        - $ref: '#/components/parameters/CollectionProjectionQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreateOrReplace'
      responses:
        '201':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        '400':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorDuplicateCollection'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/CollectionProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return a Collection
      description: ''
      operationId: getCollection
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Collection
      summary: Merge provided properties with a Collection
      description: ''
      operationId: updateCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Collection
      summary: Set all properties of a Collection
      operationId: replaceCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreateOrReplace'
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Collection
      summary: Delete a Collection
      operationId: deleteCollection
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/checklists/{benchmarkId}/{revisionStr}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - name: benchmarkId
        in: path
        description: A path parameter that identifies a STIG
        required: true
        schema:
          type: string
      - name: revisionStr
        in: path
        description: >-
          A path parameter that identifies a STIG revision [
          V{version_num}R{release_num} | 'latest' ]
        required: true
        schema:
          pattern: ^(V\d+R\d+(\.\d+)?|latest)$
          type: string
    get:
      tags:
        - Collection
      summary: Return the Checklist for the supplied Collection and STIG
      operationId: getChecklistByCollectionStig
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChecklistCollectionStig'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/findings':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/FindingAggregatorQuery'
      - name: acceptedOnly
        in: query
        schema:
          type: boolean
          default: false
      - $ref: '#/components/parameters/BenchmarkIdQuery'
      - $ref: '#/components/parameters/AssetIdQuery'
      - $ref: '#/components/parameters/FindingProjectionQuery'
    get:
      tags:
        - Collection
      summary: Return the Findings for the specified Collection
      operationId: getFindingsByCollection
      responses:
        '200':
          description: CollectionFinding response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindingProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/grants/{userId}/access':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/UserIdPath'
    get:
      tags:
        - Collection
      summary: Return an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel >= 3 to the Collection.
      operationId: getStigAssetsByCollectionUser
      responses:
        '200':
          description: CollectionGrant response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StigAssetProjected'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Collection
      summary: Set an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel >= 3 to the Collection.
      operationId: setStigAssetsByCollectionUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StigAsset'
      responses:
        '200':
          description: CollectionProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StigAssetProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/poam':
    get:
      tags:
        - Collection
      summary: Return a POAM-like spreadsheet for the specified Collection aggregated by groupId
      operationId: getPoamByCollection
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/PoamAggregatorQuery'
        - name: acceptedOnly
          in: query
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/AssetIdQuery'
        - name: date
          description: Value for columns Scheduled Completion Date, Milestone With Completion Dates, Milestone Changes
          in: query
          schema:
            type: string
        - name: office
          description: Value for column Office/Org
          in: query
          schema:
            type: string
        - name: status
          description: Value for column Status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: CollectionFinding response
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/reviews':
    get:
      tags:
        - Review
      summary: Return a list of Reviews accessible to the requester
      description: ''
      operationId: getReviewsByCollection
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/ReviewRulesQuery'
        - $ref: '#/components/parameters/ReviewResultQuery'
        - $ref: '#/components/parameters/ReviewActionQuery'
        - $ref: '#/components/parameters/ReviewStatusQuery'
        - $ref: '#/components/parameters/RuleIdQuery'
        - $ref: '#/components/parameters/GroupIdQuery'
        - $ref: '#/components/parameters/CciQuery'
        - $ref: '#/components/parameters/UserIdQuery'
        - $ref: '#/components/parameters/AssetIdQuery'
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/ReviewsProjectionQuery'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewsProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/reviews/{assetId}':
    get:
      tags:
        - Review
      summary: Return a list of Reviews for an Asset
      operationId: getReviewsByAsset
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/AssetIdPath'
        - $ref: '#/components/parameters/ReviewRulesQuery'
        - $ref: '#/components/parameters/ReviewResultQuery'
        - $ref: '#/components/parameters/ReviewActionQuery'
        - $ref: '#/components/parameters/ReviewStatusQuery'
        - $ref: '#/components/parameters/BenchmarkIdQuery'
        - $ref: '#/components/parameters/MetadataQuery'
        - $ref: '#/components/parameters/ReviewsProjectionQuery'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewsProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    post:
      tags:
        - Review
      summary: >-
        Post one or more Reviews
      description: ''
      operationId: postReviewsByAsset
      parameters:
        - $ref: '#/components/parameters/CollectionIdPath'
        - $ref: '#/components/parameters/AssetIdPath'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReviewPut'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
      - $ref: '#/components/parameters/ReviewProjectionQuery'
    get:
      tags:
        - Review
      summary: Return the Review for an Asset and Rule
      operationId: getReviewByAssetRule
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Review
      summary: Merge provided properties with a Review
      description: 'Update the given properties of a Review, if it exists'
      operationId: patchReviewByAssetRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewAssetRulePatch'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Review
      summary: Set all properties of a Review
      description: >-
        Create a new Review, or update all properties of an existing Review,
        setting missing properties to null
      operationId: putReviewByAssetRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewAssetRulePut'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Review
      summary: Delete a Review
      operationId: deleteReviewByAssetRule
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      responses:
        '200':
          description: ReviewsProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
    get:
      tags:
        - Review
      summary: Return the metadata for Review
      operationId: getReviewMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Review
      summary: Merge the provided object to a Review metadata
      operationId: patchReviewMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Review
      summary: Set a Review metadata to the provided object
      operationId: putReviewMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
    get:
      tags:
        - Review
      summary: Return the keys of the provided Review's metadata
      operationId: getReviewMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/AssetIdPath'
      - $ref: '#/components/parameters/RuleIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Review
      summary: Return the value of the provided Review metadata key
      operationId: getReviewMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Review
      summary: Set the value of the provided Review metadata key to the provided string
      operationId: putReviewMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Review
      summary: Remove the provided Review metadata key
      operationId: deleteReviewMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/metadata':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/ElevateQuery'
    get:
      tags:
        - Collection
      summary: Return the metadata for Collection
      operationId: getCollectionMetadata
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    patch:
      tags:
        - Collection
      summary: Merge the provided object to a Collection metadata
      operationId: patchCollectionMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    put:
      tags:
        - Collection
      summary: Set a Collection metadata to the provided object
      operationId: putCollectionMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/metadata/keys':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/ElevateQuery'
    get:
      tags:
        - Collection
      summary: Return the keys of the provided Collection metadata
      operationId: getCollectionMetadataKeys
      responses:
        '200':
          description: MetadataKeys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/metadata/keys/{key}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/MetadataKeyPath'
    get:
      tags:
        - Collection
      summary: Return the value of the provided Collection metadata key
      operationId: getCollectionMetadataValue
      responses:
        '200':
          description: MetadataValue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataValue'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Collection
      summary: Set the value of the provided Collection metadata key to the provided string
      operationId: putCollectionMetadataValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataValue'
      responses:
        '204':
          description: Empty to avoid large response after putting key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
    delete:
      tags:
        - Collection
      summary: Remove the provided Collection metadata key
      operationId: deleteCollectionMetadataKey
      responses:
        '204':
          description: Empty to avoid large response after deleteing key with large value
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  '/collections/{collectionId}/review-history':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
    get:
      tags:
        - Collection
      summary: Return history records for the specified Collection that meet the specified criteria
      operationId: getReviewHistoryByCollection
      parameters: 
        - $ref: '#/components/parameters/StartDateQuery' # Upper (most recent) bound of returned history entry timestamps
        - $ref: '#/components/parameters/EndDateQuery'    # Lower (earliest) bound of returned history entry timestamps 
        - $ref: '#/components/parameters/AssetIdQuery'  # return review history entries for just the specified assetId, if provided.
        - $ref: '#/components/parameters/RuleIdQuery'  # return review history entries for just the specified RuleId, if provided.        
        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history entries with the specified status
      responses:
        '200':
          description: ReviewHistory response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewHistoryAsset'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    delete:
      tags:
        - Collection
      summary: Remove history records that meet specified criteria
      operationId: deleteReviewHistoryByCollection
      parameters: 
        - $ref: '#/components/parameters/RetentionDateQuery' # Review History Entries older than this date will be deleted.
        - $ref: '#/components/parameters/AssetIdQuery'  # Apply operation to just the specified assetId, if provided.
      responses:
        '200':
          description: Number of history records deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewHistoryDeleted'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'            
  '/collections/{collectionId}/review-history/stats':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
    get:
      tags:
        - Collection
      summary: Return history statistics for the specified Collection
      operationId: getReviewHistoryStatsByCollection
      parameters:
        - $ref: '#/components/parameters/StartDateQuery' # Upper (most recent) bound of history entry timestamps
        - $ref: '#/components/parameters/EndDateQuery'    # Lower (earliest) bound of history entry timestamps 
        - $ref: '#/components/parameters/AssetIdQuery'  # return review history stats for just the specified assetId, if provided.
        - $ref: '#/components/parameters/RuleIdQuery'  # return review history stats for just the specified RuleId, if provided.        
        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history stats with the specified status        
        - $ref: '#/components/parameters/ReviewHistoryStatsProjectionQuery' 
      responses:
        '200':
          description: ReviewHistoryStats response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewHistoryStats'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'            
  '/collections/{collectionId}/status':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdQuery'
      - $ref: '#/components/parameters/AssetIdQuery'
    get:
      tags:
        - Collection
      summary: Return the status statistics for the specified Collection
      operationId: getStatusByCollection
      responses:
        '200':
          description: CollectionStatus response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionStatus'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/stigs':
    parameters:
      - $ref: '#/components/parameters/CollectionIdPath'
    get:
      tags:
        - Collection
      summary: Return the STIGs mapped in the specified Collection
      operationId: getStigsByCollection
      responses:
        '200':
          description: CollectionFinding response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionStig'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
  '/collections/{collectionId}/stigs/{benchmarkId}/assets':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/CollectionIdPath'
      - $ref: '#/components/parameters/BenchmarkIdPath'
      - $ref: '#/components/parameters/StigAssetsProjectionQuery'
    get:
      tags:
        - Asset
        - Collection
      summary: Get the Assets in a Collection attached to a STIG
      description: ''
      operationId: getAssetsByStig
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/AssetBasic'
                    - type: object
                      properties:
                        restrictedUserAccess:
                          type: array
                          items:
                            $ref: '#/components/schemas/UserBasic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection:read'
    put:
      tags:
        - Asset
        - Collection
      summary: Set the Assets mapped to a STIG
      description: ''
      operationId: attachAssetsToStig
      requestBody:
        required: true
        description: A list of assetIds from the specified Collection
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBasic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:collection'
  /op/appdata:
    get:
      tags:
        - Operation
      summary: Export application data
      operationId: getAppData
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      responses:
        '200':
          description: Exported data
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - stig-manager:op:read
    post:
      tags:
        - Operation
      summary: Import and overwrite application data
      operationId: replaceAppData
      parameters:
        - $ref: '#/components/parameters/ElevateQuery'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                collections:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                importFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: Import successful
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - stig-manager:op
  /op/configuration:
    get:
      tags:
        - Operation
      summary: Return API version and configuration information
      operationId: getConfiguration
      security: []
      responses:
        '200':
          description: Configuration response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConfiguration'
  /stigs:
    get:
      tags:
        - STIG
      summary: Return a list of available STIGs
      operationId: getSTIGs
      parameters:
        - name: title
          in: query
          description: A string found anywhere in a STIG title
          schema:
            type: string
      responses:
        '200':
          description: STIG response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    post:
      tags:
        - STIG
      summary: Import a STIG or SCAP Benchmark
      operationId: importBenchmark
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                importFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: The added STIG
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
  '/stigs/ccis/{cci}':
    get:
      tags:
        - STIG
      summary: Return data for the specified CCI
      operationId: getCci
      parameters:
        - $ref: '#/components/parameters/CciProjectionQuery'
        - name: cci
          in: path
          description: A path parameter that identifies a CCI
          required: true
          schema:
            pattern: ^[0-9]{6}$
            type: string
      responses:
        '200':
          description: CCI response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cci'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/rules/{ruleId}':
    get:
      tags:
        - STIG
      summary: >-
        Return the defintion and associated checks and fixes for the specified
        Rule
      operationId: getRuleByRuleId
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: ruleId
          in: path
          description: A path parameter that identifies a Rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/scap-maps':
    get:
      tags:
        - STIG
      summary: Return a list of SCAP benchmarkIds mapped to Manual benchmarkIds
      operationId: getScapMap
      responses:
        '200':
          description: SCAP Map response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SCAPMap'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}':
    get:
      tags:
        - STIG
      summary: Return properties of the specified STIG
      operationId: getStigById
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: STIG response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    delete:
      tags:
        - STIG
      summary: Deletes a STIG (*** and all revisions ***)
      operationId: deleteStigById
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The deleted STIG
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STIG'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
      x-rbac:
        - admin
  '/stigs/{benchmarkId}/revisions':
    get:
      tags:
        - STIG
      summary: Return a list of revisions for the specified STIG
      operationId: getRevisionsByBenchmarkId
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}':
    get:
      tags:
        - STIG
      summary: Return metadata for the specified revision of a STIG
      operationId: getRevisionByString
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: Revision response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
    delete:
      tags:
        - STIG
      summary: Deletes the specified revision of a STIG
      operationId: deleteRevisionByString
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?)$
            type: string
      responses:
        '200':
          description: The deleted Revision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig'
      x-rbac:
        - admin
  '/stigs/{benchmarkId}/revisions/{revisionStr}/ccis':
    get:
      tags:
        - STIG
      summary: Return a list of CCIs from a STIG revision
      operationId: getCcisByRevision
      parameters:
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: CCI response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CciListItem'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups':
    get:
      tags:
        - STIG
      summary: Return the list of groups for the specified revision of a STIG.
      operationId: getGroupsByRevision
      parameters:
        - $ref: '#/components/parameters/GroupProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: GroupProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups/{groupId}':
    get:
      tags:
        - STIG
      summary: >-
        Return the rules, checks and fixes for a Group from a specified revision
        of a STIG.
      description: None
      operationId: getGroupByRevision
      parameters:
        - $ref: '#/components/parameters/GroupProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
        - name: groupId
          in: path
          description: A path parameter that identifies a Group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules':
    get:
      tags:
        - STIG
      summary: Return rule data for the specified revision of a STIG.
      operationId: getRulesByRevision
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
      responses:
        '200':
          description: Rule response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules/{ruleId}':
    get:
      tags:
        - STIG
      summary: Return rule data for the specified Rule in a revision of a STIG.
      operationId: getRuleByRevision
      parameters:
        - $ref: '#/components/parameters/RuleProjectionQuery'
        - name: benchmarkId
          in: path
          description: A path parameter that identifies a STIG
          required: true
          schema:
            type: string
        - name: revisionStr
          in: path
          description: >-
            A path parameter that identifies a STIG revision [
            V{version_num}R{release_num} | 'latest' ]
          required: true
          schema:
            pattern: ^(V\d+R\d+(\.\d+)?|latest)$
            type: string
        - name: ruleId
          in: path
          description: A path parameter that identifies a Rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rule response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:stig:read'
  /user:
    get:
      tags:
        - User
      summary: Return the requester's user information
      operationId: getUserObject
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
  /users:
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/UserProjectionQuery'
    get:
      tags:
        - User
      summary: Return a list of Users accessible to the requester
      operationId: getUsers
      parameters:
      - $ref: '#/components/parameters/UsernameQuery'
      - $ref: '#/components/parameters/UsernameMatchQuery'
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
    post:
      tags:
        - User
      summary: Create a User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrReplace'
      responses:
        '201':
          description: UserProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/ElevateQuery'
      - $ref: '#/components/parameters/UserProjectionQuery'
      - $ref: '#/components/parameters/UserIdPath'
    get:
      tags:
        - User
      summary: Return a User
      operationId: getUserByUserId
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user:read'
    patch:
      tags:
        - User
      summary: Merge provided properties with a User
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
    put:
      tags:
        - User
      summary: Set all properties of a User
      operationId: replaceUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrReplace'
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
    delete:
      tags:
        - User
      summary: Delete a User
      operationId: deleteUser
      responses:
        '200':
          description: UserProjected response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProjected'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth:
            - 'stig-manager:user'
components:
  schemas:
    AccessLevel:
      type: integer
      minimum: 1
      maximum: 3
    ApiConfiguration:
      type: object
      properties:
        classification:
          type: string
          enum:
            - NONE
            - U
            - FOUO
            - C
            - S
            - TS
            - SCI
        commit:
          type: object
          properties:
            branch:
              type: string
            sha:
              type: string
            tag:
              type: string
            describe:
              type: string
        version:
          type: string
    Asset:
      type: object
      properties:
        assetId:
          readOnly: true
          type: string
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collection:
          $ref: '#/components/schemas/CollectionBasic'
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
    AssetBasic:
      type: object
      properties:
        assetId:
          type: string
        name:
          type: string
    AssetCreateOrReplace:
      required:
        - name
        - collectionId
        - description
        - ip
        - noncomputing
        - metadata
        - stigs
      additionalProperties: false
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collectionId:
          description: The collectionId mapped to this Asset
          type: string
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        stigs:
          description: The benchmarkIds mapped to this Asset
          type: array
          items:
            type: string
    AssetForCollection:
      type: object
      properties:
        assetId:
          type: string
        name:
          type: string
    AssetProjected:
      allOf:
        - $ref: '#/components/schemas/Asset'
        - type: object
          properties:
            adminStats:
              type: object
              properties:
                stigCount:
                  type: integer
                stigAssignedCount:
                  type: integer
                ruleCount:
                  type: integer
                acceptedCount:
                  type: integer
                submittedCount:
                  type: integer
            stigs:
              type: array
              description: The benchmarkIds mapped to this Asset
              items:
                $ref: '#/components/schemas/STIG'
            stigGrants:
              type: array
              items:
                $ref: '#/components/schemas/StigGrantProjected'
    AssetUpdate:
      properties:
        name:
          type: string
          nullable: false
          maxLength: 255
        fqdn:
          type: string
          nullable: true
          maxLength: 255
        collectionId:
          description: The collectionId mapped to this Asset
          type: string
        description:
          type: string
          nullable: true
          maxLength: 255
        ip:
          type: string
          nullable: true
          maxLength: 255
        mac:
          type: string
          nullable: true
          maxLength: 255
        noncomputing:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        stigs:
          description: The benchmarkIds mapped to this Asset
          type: array
          items:
            type: string
    Cci:
      type: object
      properties:
        cci:
          type: string
        status:
          type: string
        publishdate:
          type: string
        contributor:
          type: string
        type:
          type: string
        defintion:
          type: string
        emassAp:
          $ref: '#/components/schemas/EmassAp'
          nullable: true
        references:
          type: array
          items:
            $ref: '#/components/schemas/CciReferenceItem'
        stigs:
          type: array
          items:
            $ref: '#/components/schemas/RevisionBasic'
    CciBasic:
      type: object
      properties:
        cci:
          type: string
        emassAp:
          type: string
        controls:
          type: array
          items:
            $ref: '#/components/schemas/CciReferenceRev4'
    CciListItem:
      type: object
      properties:
        cci:
          type: string
        type:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/CciReferenceItem'
    CciReferenceItem:
      type: object
      properties:
        creator:
          type: string
        title:
          type: string
        version:
          type: string
        location:
          type: string
        indexDisa:
          type: string
        textRefNist:
          type: string
        parentControl:
          type: string
    CciReferenceRev4:
      type: object
      properties:
        indexDisa:
          type: string
        textRefNist:
          type: string
        parentControl:
          type: string
    Check:
      type: object
      properties:
        checkId:
          type: string
        content:
          type: string
    ChecklistAssetStig:
      type: array
      items:
        type: object
        properties:
          ruleId:
            type: string
          ruleTitle:
            type: string
          groupId:
            type: string
          groupTitle:
            type: string
          severity:
            $ref: '#/components/schemas/RuleSeverity'
          autoCheckAvailable:
            type: boolean
          result:
            $ref: '#/components/schemas/ChecklistResult'
          autoResult:
            type: boolean
          status:
            $ref: '#/components/schemas/ChecklistStatus'
          reviewComplete:
            type: boolean
    ChecklistAssetStigs:
      type: object
      properties:
        benchmarkId:
          type: string
        revisionStr:
          type: string
        checklist:
          $ref: '#/components/schemas/ChecklistAssetStig'
    ChecklistCkl:
      type: object
      description: The CKL format generated and read by DISA STIG VIewer
      xml:
        name: CHECKLIST
      properties:
        ASSET:
          type: object
          properties:
            ASSET_TYPE:
              type: string
            HOST_NAME:
              type: string
            HOST_IP:
              type: string
            HOST_MAC:
              type: string
            HOST_GUID:
              type: string
            HOST_FQDN:
              type: string
            TECH_AREA:
              type: string
            TARGET_KEY:
              type: string
        STIGS:
          type: object
          properties:
            iSTIG:
              type: array
              items:
                type: object
                properties:
                  STIG_INFO:
                    type: array
                    items:
                      type: object
                      properties:
                        SI_DATA:
                          type: object
                          properties:
                            SID_NAME:
                              type: string
                            SID_DATA:
                              type: string
                  VULN:
                    type: array
                    items:
                      type: object
                      properties:
                        STIG_DATA:
                          type: array
                          items:
                            type: object
                            properties:
                              VULN_ATTRIBUTE:
                                type: string
                              ATTRIBUTE_DATA:
                                type: string
                        STATUS:
                          type: string
                          enum:
                            - Open
                            - NotAFinding
                            - Not_Applicable
                            - Not_Reviewed
                        FINDING_DETAILS:
                          type: string
                        COMMENTS:
                          type: string
                        SEVERITY_OVERRIDE:
                          type: string
                        SEVERITY_JUSTIFICATION:
                          type: string
    ChecklistCollectionStig:
      type: object
      properties:
        ruleId:
          type: string
        ruleTitle:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        autoCheckAvailable:
          type: boolean
        counts:
          type: object
          properties:
            results:
              type: object
              properties:
                pass:
                  type: integer
                fail:
                  type: integer
                notapplicable:
                  type: integer
                notchecked:
                  type: integer
            statuses:
              type: object
              properties:
                saved:
                  type: integer
                submitted:
                  type: integer
                accepted:
                  type: integer
                rejected:
                  type: integer
    ChecklistResult:
      description: The Review result
      type: string
      nullable: true
      enum:
        - fail
        - pass
        - notapplicable
        - notchecked
        - unknown
        - error
        - notselected
        - informational
        - fixed
        - null
    ChecklistStatus:
      type: string
      nullable: true
      enum:
        - saved
        - submitted
        - accepted
        - rejected
        - null
    ClientErrorDuplicateAsset:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 400
        message:
          type: string
          enum:
            - 'Duplicate name'
        data:
          $ref: '#/components/schemas/AssetProjected'
    ClientErrorDuplicateCollection:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 400
        message:
          type: string
          enum:
            - 'Duplicate name'
        data:
          $ref: '#/components/schemas/CollectionProjected'
    Collection:
      type: object
      properties:
        collectionId:
          readOnly: true
          type: string
          nullable: false
        name:
          type: string
        description:
          type: string
          nullable: true
        workflow:
          $ref: '#/components/schemas/CollectionWorkflow'
        metadata:
          $ref: '#/components/schemas/Metadata'
        created:
          type: string
    CollectionBasic:
      type: object
      properties:
        collectionId:
          type: string
        name:
          type: string
        workflow:
          $ref: '#/components/schemas/CollectionWorkflow'
    CollectionCreateOrReplace:
      required:
        - name
        - workflow
        - metadata
        - grants
      additionalProperties: false
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        workflow:
          $ref: '#/components/schemas/CollectionWorkflow'
        metadata:
          $ref: '#/components/schemas/Metadata'
        grants:
          type: array
          items:
            $ref: '#/components/schemas/UserGrant'
    CollectionGrant:
      type: object
      required:
        - collectionId
        - accessLevel
      additionalProperties: false
      properties:
        collectionId:
          type: string
        accessLevel:
          type: integer
    CollectionGrantProjected:
      type: object
      additionalProperties: false
      properties:
        collection:
          type: object
          properties:
            collectionId:
              type: string
            name:
              type: string
        accessLevel:
          type: integer
    CollectionProjected:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            assets:
              type: array
              items:
                $ref: '#/components/schemas/AssetForCollection'
            stigs:
              type: array
              items:
                $ref: '#/components/schemas/STIG'
            grants:
              type: array
              items:
                $ref: '#/components/schemas/UserGrantProjected'
    CollectionsProjected:
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            owners:
              type: array
              items:
                $ref: '#/components/schemas/User'
            statistics:
              type: object
    CollectionStatus:
      type: object
      properties:
        assetId:
          type: string
        assetName:
          type: string
        benchmarkId:
          type: string
        minTs:
          type: string
        maxTs:
          type: string
        rules:
          $ref: '#/components/schemas/CollectionStatusCount'
        findings:
          type: object
          properties:
            low:
              type: integer
            medium:
              type: integer
            high:
              type: integer
        status:
          type: object
          properties:
            saved:
              $ref: '#/components/schemas/CollectionStatusCount'
            submitted:
              $ref: '#/components/schemas/CollectionStatusCount'
            rejected:
              $ref: '#/components/schemas/CollectionStatusCount'
            accepted:
              $ref: '#/components/schemas/CollectionStatusCount'
    CollectionStatusCount:
      type: object
      properties:
        total:
          type: integer
        auto:
          type: integer
    CollectionStig:
      type: object
      properties:
        benchmarkId:
          type: string
        title:
          type: string
        lastRevisionStr:
          type: string
        lastRevisionDate:
          type: string
        ruleCount:
          type: integer
        assetCount:
          type: integer
        acceptedCount:
          type: integer
        submittedCount:
          type: integer
        savedCount:
          type: integer
    CollectionUpdate:
      additionalProperties: false
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        workflow:
          $ref: '#/components/schemas/CollectionWorkflow'
        metadata:
          $ref: '#/components/schemas/Metadata'
        grants:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              accessLevel:
                type: integer
    CollectionWorkflow:
      type: string
      enum:
        - continuous
        - emass
    Date:
      type: string
      pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$'        
    EmassAp:
      type: object
      properties:
        apAcronym:
          type: string
        implementation:
          type: string
        assessmentProcedure:
          type: string
    EmassPoamRarRecord:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EmassPoamRarStatus'
        control:
          type: string
        residualRisk:
          $ref: '#/components/schemas/RuleSeverity'
        mitigations:
          type: string
        completionDate:
          type: string
        milestone:
          type: string
        rarLikelihood:
          type: string
        rarRecommendedCorrectiveAction:
          type: string
        rarRemediationDescription:
          type: string
        rarComment:
          type: string
    EmassPoamRarRecordUpdate:
      type: object
      required:
        - status
        - control
        - residualRisk
        - mitigations
        - completionDate
        - milestone
        - rarLikelihood
        - rarRecommendedCorrectiveAction
        - rarRemediationDescription
        - rarComment
      properties:
        status:
          $ref: '#/components/schemas/EmassPoamRarStatus'
        control:
          type: string
        residualRisk:
          $ref: '#/components/schemas/RuleSeverity'
        mitigations:
          type: string
        completionDate:
          type: string
        milestone:
          type: string
        rarLikelihood:
          type: string
        rarRecommendedCorrectiveAction:
          type: string
        rarRemediationDescription:
          type: string
        rarComment:
          type: string
    EmassPoamRarStatus:
      type: string
      enum:
        - ongoing
        - completed
    Error:
      required:
        - message
      type: object
      properties:
        message:
          type: string
    FindingProjected:
      type: object
      properties:
        ruleId:
          type: string
        ruleTitle:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        severity:
          $ref: '#/components/schemas/RuleSeverity'
        ccis:
          type: array
          items:
            $ref: '#/components/schemas/CciBasic'
        benchmarkIds:
          type: array
          items:
            type: string
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetBasic'
    Fix:
      type: object
      properties:
        fixId:
          type: string
        text:
          type: string
    GroupProjected:
      type: object
      properties:
        groupId:
          type: string
        title:
          type: string
        rules:
            type: array
            items:
              $ref: '#/components/schemas/RuleAbbr'
    Metadata:
      type: object
      additionalProperties:
        type: string
    MetadataKey:
      type: string
    MetadataValue:
      type: string
    Review:
      type: object
      properties:
        assetId:
          type: string
        assetName:
          type: string
        ruleId:
          type: string
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultComment:
          type: string
        autoResult:
          type: boolean
        action:
          $ref: '#/components/schemas/ReviewAction'
        actionComment:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatus'
        userId:
          type: string
        username:
          type: string
        ts:
          type: string
          readOnly: true
        rejectText:
          type: string
        rejectUserId:
          type: string
          readOnly: true
        reviewComplete:
          type: boolean
    ReviewAction:
      type: string
      nullable: true
      enum:
        - remediate
        - mitigate
        - exception
        - null
    ReviewAssetRulePatch:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultComment:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ReviewAction'
        actionComment:
          type: string
          nullable: true
        autoResult:
          type: boolean
        rejectText:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatus'
    ReviewAssetRulePut:
      type: object
      required:
        - result
        - resultComment
        - status
      properties:
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultComment:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ReviewAction'
        actionComment:
          type: string
          nullable: true
        autoResult:
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        status:
          $ref: '#/components/schemas/ReviewStatus'
    ReviewCheckType:
      type: string
      enum:
        - scap
        - manual
    ReviewHistory:
      type: object
      properties:
        ruleId:
          type: string        
        ts:
          type: string
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultComment:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ReviewAction'
        actionComment:
          type: string
          nullable: true
        autoResult:
          type: boolean
        status:
          $ref: '#/components/schemas/ReviewStatus'
        userId:
          type: string
        username:
          type: string
        rejectText:
          type: string
          nullable: true
        rejectUserId:
          type: string
          nullable: true
      required: 
        - ts      
        - result
        - resultComment
        - action
        - actionComment 
        - autoResult
        - status
        - userId         
        - username
        - rejectText
    ReviewHistoryAsset:
      type: object
      properties:
        assetId:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistory'   
      required: 
        - assetId
        - history
    ReviewHistoryDeleted:     
      type: object
      properties:
        HistoryEntriesDeleted: 
          type: integer   
    ReviewHistoryStat:
      type: object
      properties:
        historyEntryCount: 
          type: integer
        oldestHistoryEntryDate: 
          type: string
    ReviewHistoryStats:
      type: object
      properties:
        collectionHistoryEntryCount: 
          type: integer
        oldestHistoryEntryDate: 
          type: string
          nullable: true
        assetHistoryEntryCounts:
          type: array
          items:
            $ref: '#/components/schemas/ReviewHistoryStatsAssetProjected'
      required:
        - collectionHistoryEntryCount
        - oldestHistoryEntryDate
    ReviewHistoryStatsAssetProjected:
      type: object
      properties:
        assetId:
          type: string
        historyEntryCount:
          type: integer
        oldestHistoryEntry:
          type: string
          nullable: true
        # ruleHistoryStats:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/ReviewHistoryStatsAssetRuleProjected'
      required: 
        - assetId
        - historyEntryCount
        - oldestHistoryEntry
    ReviewHistoryStatsAssetRuleProjected:
      type: object
      properties:
        ruleId:
          type: string
        historyEntryCount:
          type: integer
        oldestHistoryEntry:
          type: string
          nullable: true
      required: 
        - ruleId
        - historyEntryCount
        - oldestHistoryEntry
    ReviewPut:
      type: object
      required:
        - ruleId
        - result
        - resultComment
        - status
      properties:
        ruleId:
          type: string
        result:
          $ref: '#/components/schemas/ReviewResult'
        resultComment:
          type: string
          nullable: true
        action:
          $ref: '#/components/schemas/ReviewAction'
        actionComment:
          type: string
          nullable: true
        autoResult:
          type: boolean
          nullable: true
        status:
          $ref: '#/components/schemas/ReviewStatus'
        metadata:
          $ref: '#/components/schemas/Metadata'
    ReviewResult:
      description: The Review result
      type: string
      enum:
        - fail
        - pass
        - notapplicable
        - notchecked
        - unknown
        - error
        - notselected
        - informational
        - fixed
    ReviewStatus:
      type: string
      enum:
        - saved
        - submitted
        - accepted
        - rejected
    ReviewProjected:
      allOf:
        - $ref: '#/components/schemas/Review'
        - type: object
          properties:
            history:
              type: array
              items:
                $ref: '#/components/schemas/ReviewHistory'
            stigs:
              type: array
              items:
                type: string
            rule:
              $ref: '#/components/schemas/RuleAbbr'
            metadata:
              $ref: '#/components/schemas/Metadata'
    ReviewsProjected:
      allOf:
        - $ref: '#/components/schemas/Review'
        - type: object
          properties:
            stigs:
              type: array
              items:
                type: string
            rule:
              $ref: '#/components/schemas/RuleAbbr'
            metadata:
              $ref: '#/components/schemas/Metadata'
    Revision:
      type: object
      properties:
        benchmarkId:
          type: string
        revisionStr:
          type: string
        version:
          type: string
        release:
          type: string
        benchmarkDate:
          type: string
        status:
          type: string
        statusDate:
          type: string
        description:
          type: string
    RevisionBasic:
      type: object
      properties:
        benchmarkId:
          type: string
        revisionStr:
          type: string
    RuleAbbr:
      type: object
      properties:
        ruleId:
          type: string
        version:
          type: string
        title:
          type: string
        severity:
          type: string
    RuleProjected:
      type: object
      required:
        - ruleId
        - version
        - title
        - severity
        - groupId
        - groupTitle
      properties:
        ruleId:
          type: string
        version:
          type: string
        title:
          type: string
        severity:
          type: string
        groupId:
          type: string
        groupTitle:
          type: string
        detail:
          type: object
          properties:
            weight:
              type: string
            vulnDiscussion:
              type: string
            falsePositives:
              type: string
            falseNegatives:
              type: string
            documentable:
              type: string
            mitigations:
              type: string
            securityOverrideGuidance:
              type: string
            potentialImpacts:
              type: string
            thirdPartyTools:
              type: string
            mitigationControl:
              type: string
            responsibility:
              type: string              
        ccis:
          type: array
          items:
            type: string
        checks:
          type: array
          items:
            $ref: '#/components/schemas/Check'
        fixes:
          type: array
          items:
            $ref: '#/components/schemas/Fix'
    RuleSeverity:
      type: string
      enum:
        - high
        - medium
        - low
    SCAPMap:
      type: object
      properties:
        scapBenchmarkId:
          type: string
        benchmarkId:
          type: string
    STIG:
      type: object
      properties:
        benchmarkId:
          type: string
        title:
          type: string
        status:
          type: string
        lastRevisionStr:
          type: string
        lastRevisionDate:
          type: string
        ruleCount:
          type: integer
        autoCount:
          type: integer
        revisionStrs:
          type: array
          items:
           type: string
           pattern: ^V\d+R\d+(\.\d+)?$
    StigAsset:
      type: object
      required:
        - benchmarkId
        - assetId
      properties:
        benchmarkId:
          type: string
        assetId:
          type: string
    StigAssetProjected:
      type: object
      properties:
        benchmarkId:
          type: string
        asset:
          $ref: '#/components/schemas/AssetBasic'
    StigGrantProjected:
      type: object
      properties:
        benchmarkId:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserBasic'
    STIGs:
      description: List of STIG
      type: array
      items:
        $ref: '#/components/schemas/STIG'
    User:
      type: object
      properties:
        userId:
          type: string
          readOnly: true
        username:
          type: string
        displayName:
          type: string
        email:
          type: string
    UserBasic:
      type: object
      properties:
        userId:
          type: string
          readOnly: true
        username:
          type: string
    UserCreateOrReplace:
      required:
        - username
        - collectionGrants
      type: object
      properties:
        username:
          type: string
        collectionGrants:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGrant'
    UserGrant:
      type: object
      required:
        - userId
        - accessLevel
      additionalProperties: false
      properties:
        userId:
          type: string
        accessLevel:
          type: integer
          minimum: 1
          maximum: 4
    UserGrantProjected:
      type: object
      additionalProperties: false
      properties:
        user:
          type: object
          properties:
            userId:
              type: string
            username:
              type: string
          required:
            - userId
            - username
        accessLevel:
          type: integer
          minimum: 1
          maximum: 4
      required:
        - user          
        - accessLevel
    UserProjected:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            collectionGrants:
              type: array
              items:
                $ref: '#/components/schemas/CollectionGrantProjected'
        - type: object
          properties:
            statistics:
              $ref: '#/components/schemas/UserStatistics'
    UserStatistics:
      type: object
      properties:
        created:
          type: string
        collectionGrantCount:
          type: integer
        lastAccess:
          type: integer
        lastClaims:
          type: object
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        collectionGrants:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGrant'
  parameters:
    AssetIdPath:
      name: assetId
      in: path
      description: A path parameter that identifies an Asset
      required: true
      schema:
        type: string
    AssetIdQuery:
      name: assetId
      in: query
      description: A query parameter that identifies an Asset
      schema:
        type: string
    AssetProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - adminStats
            - stigs
            - stigGrants
    BenchmarkIdPath:
      name: benchmarkId
      in: path
      description: A path parameter that identifies a STIG
      required: true
      schema:
        type: string
    BenchmarkIdQuery:
      name: benchmarkId
      in: query
      description: A query parameter that identifies a STIG
      schema:
        type: string
    CciPath:
      name: cci
      in: path
      description: A path parameter that identifies a CCI
      required: true
      schema:
        type: string
    CciProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - emassAp
            - stigs
            - references
    CciQuery:
      name: cci
      in: query
      description: A query parameter that identifies a CCI
      schema:
        type: string
    ChecklistProjectionQuery:
      name: projection
      in: query
      description: >
        Optional properties to return. Selecting "checks" or "fixes" will also
        select "fullrules"
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - cci
            - fullrules
            - checks
            - fixes
    CollectionIdPath:
      name: collectionId
      in: path
      description: A path parameter that identifies a Collection
      required: true
      schema:
        type: string
    CollectionIdQuery:
      name: collectionId
      in: query
      description: A query parameter that identifies a Collection
      schema:
        type: string
    CollectionProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - assets
            - grants
            - owners
            - statistics
            - stigs
    CollectionsProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - owners
            - statistics
    CollectionWorkflowQuery:
      name: workflow
      in: query
      description: Match Collections having a specific workflow.
      schema:
        type: string
        enum:
          - continuous
          - emass
    EndDateQuery:
      name: endDate
      in: query
      description: History entries with a timestamp after the specified end date.
      schema:
        $ref: '#/components/schemas/Date'
    ElevateQuery:
      name: elevate
      in: query
      description: >-
        Elevate the user context for this request if user is permitted
        (canAdmin)
      schema:
        type: boolean
    FindingAggregatorQuery:
      name: aggregator
      required: true
      in: query
      description: Aggregate the findings on this property
      schema:
        type: string
        enum:
          - ruleId
          - groupId
          - cci
    FindingProjectionQuery:
      name: projection
      in: query
      description: Optional properties to return
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - assets
            - groups
            - rules
            - stigs
            - ccis
    GroupIdPath:
      name: groupId
      in: path
      description: A path parameter that identifies a Group
      required: true
      schema:
        type: string
    GroupIdQuery:
      name: groupId
      in: query
      description: A query parameter that identifies a Group
      schema:
        type: string
    GroupProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - rules
    MetadataKeyPath:
      name: key
      in: path
      required: true
      description: >-
        A path parameter that specifies a metadata key
      schema:
        pattern: '^([\w\.]+)$'
        type: string
    MetadataQuery:
      name: metadata
      in: query
      description: >-
        A query parameter that specifies metadata key:value pairs to select
        matching Objects
      schema:
        type: array
        items:
          pattern: '^([\w\.]+\:.*?)$'
          type: string
    NameQuery:
      name: name
      in: query
      description: Matches against the name according to the `name-match` parameter
      schema:
        type: string
    NameMatchQuery:
      name: name-match
      in: query
      description: How to match against the `name` parameter
      schema:
        type: string
        default: exact
        enum:
          - exact
          - startsWith
          - endsWith
          - contains
    PoamAggregatorQuery:
      name: aggregator
      required: true
      in: query
      description: Aggregate the findings on this property
      schema:
        type: string
        enum:
          - ruleId
          - groupId
    RetentionDateQuery:
      name: retentionDate
      in: query
      description: Delete history entries with a timestamp earlier than the specified retention date.
      required: true
      schema:
        $ref: '#/components/schemas/Date'
    ReviewActionQuery:
      name: action
      in: query
      schema:
        $ref: '#/components/schemas/ReviewAction'
    ReviewProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - metadata
            - rule
            - stigs
            - history
    ReviewHistoryStatsProjectionQuery:
      name: projection
      in: query
      description: |
        Return review history statistics with the specified level of granularity.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - asset
    ReviewsProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - metadata
            - rule
            - stigs
    ReviewResultQuery:
      name: result
      in: query
      schema:
        $ref: '#/components/schemas/ReviewResult'
    ReviewRulesQuery:
      name: rules
      in: query
      schema:
        type: string
        default: current-mapped
        enum:
          - all
          - current
          - current-mapped
          - not-current
          - not-current-mapped
    ReviewStatusQuery:
      name: status
      in: query
      schema:
        $ref: '#/components/schemas/ReviewStatus'
    RevisionStrPath:
      name: revisionStr
      in: path
      description: >-
        A path parameter that identifies a STIG revision [
        V{version_num}R{release_num} | 'latest' ]
      required: true
      schema:
        pattern: ^(V\d+R\d+(\.\d+)?|latest)$
        type: string
    RevisionStrQuery:
      name: revisionStr
      in: query
      description: >-
        Selects Reviews mapped to a Revision [ V{version_num}R{release_num} |
        'latest' ]; requires benchmarkId
      schema:
        pattern: ^(V\d+R\d+(\.\d+)?|latest)$
        type: string
    RuleIdPath:
      name: ruleId
      in: path
      description: A path parameter that identifies a Rule
      required: true
      schema:
        type: string
    RuleIdQuery:
      name: ruleId
      in: query
      description: Selects Reviews of a Rule
      schema:
        type: string
    RuleProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - detail
            - ccis
            - checks
            - fixes
    StartDateQuery:
      name: startDate
      in: query
      description: History entries with a timestamp before the specified start date.
      schema:
        $ref: '#/components/schemas/Date'            
    StigAssetsProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - restrictedUserAccess
    UserAccessLevelQuery:
      name: accessLevel
      in: query
      schema:
        $ref: '#/components/schemas/AccessLevel'
    UserIdPath:
      name: userId
      in: path
      description: A path parameter that identifies a User
      required: true
      schema:
        type: string
    UserIdQuery:
      name: userId
      in: query
      description: A path parameter that identifies a User
      schema:
        type: string
    UsernameQuery:
      name: username
      in: query
      description: Matches against the username according to the `username-match` parameter
      schema:
        type: string
    UsernameMatchQuery:
      name: username-match
      in: query
      description: How to match against the `username` parameter
      schema:
        type: string
        default: exact
        enum:
          - exact
          - startsWith
          - endsWith
          - contains
    UserProjectionQuery:
      name: projection
      in: query
      description: |
        Additional properties to include in the response.
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
          enum:
            - collectionGrants
            - statistics
  responses:
    Forbidden:
      description: The requesting User does not have access rights to the content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    oauth:
      type: openIdConnect
      openIdConnectUrl: http://localhost:8080/auth/realms/stigman/.well-known/openid-configuration
# security:
#   - oauth:
#     - stig-manager
#     - 'stig-manager:op'
#     - 'stig-manager:op:read'
#     - 'stig-manager:stig'
#     - 'stig-manager:stig:read'
#     - 'stig-manager:collection'
#     - 'stig-manager:collection:read'
#     - 'stig-manager:user'
#     - 'stig-manager:user:read'