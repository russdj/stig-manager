{
	"info": {
		"_postman_id": "acb62bf9-c924-40dc-bbe8-bfaca13b9f55",
		"name": "stig-manager",
		"description": "An API for managing evaluations of Security Technical Implementation Guide (STIG) assessments.\n\nContact Support:\n Name: Carl Smigielski\n Email: carl.a.smigielski@saic.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LoadTestData",
			"item": [
				{
					"name": "Import a new STIG - VPN  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"let response = pm.response.text();\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(response).to.include(\"currentGroupRule\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{vpnStig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import a new STIG - Win 10  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let response = pm.response.text();\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(response).to.include(\"currentGroupRule\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{win10Stig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import a new STIG - RHEL 7 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let response = pm.response.text();\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(response).to.include(\"currentGroupRule\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{rhel7Stig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import and overwrite application data (as elevated Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let response = pm.response.text();\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(response).to.include(\"Commit successful\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{appDataFile}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/op/appdata?elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"op",
								"appdata"
							],
							"query": [
								{
									"key": "elevate",
									"value": "true",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GETs",
			"item": [
				{
					"name": "Collection GET",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Get the Assets in a Collection attached to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"let collectionKeys = [\r",
																	"    \"collectionId\",\r",
																	"    \"name\",\r",
																	"    \"workflow\",\r",
																	"    \"metadata\"\r",
																	"]\r",
																	"let assetKeys = [\r",
																	"    \"assetId\",\r",
																	"    \"name\",\r",
																	"    \"collectionId\",\r",
																	"    \"restrictedUserAccess\"\r",
																	"]\r",
																	"\r",
																	"\r",
																	"pm.test(\"assets have expected properties and values\", function () {\r",
																	"    for (let asset of jsonData){\r",
																	"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
																	"        var regex = new RegExp(assetMatchString);\r",
																	"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
																	"\r",
																	"        // let collectionNames = _.map(jsonData, 'name');\r",
																	"\r",
																	"        // pm.test(\"Check that proper assets are returned\", function () {\r",
																	"            pm.expect(asset.name).to.match(regex);\r",
																	"            // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
																	"        // });\r",
																	"\r",
																	"        // if (pm.request.url.getQueryString().match(/projection=userGrants/)) {\r",
																	"        //     for (let grant of asset.grants){\r",
																	"        //         pm.expect(grant).to.have.all.keys(grantKeys);\r",
																	"        //         pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
																	"        //     }\r",
																	"        // }\r",
																	"\r",
																	"    };\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Return the STIGs mapped in the specified Collection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigKeys = [\r",
															"    \"title\",\r",
															"    \"ruleCount\",\r",
															"    \"benchmarkId\",\r",
															"    \"lastRevisionDate\",\r",
															"    \"lastRevisionStr\",\r",
															"    \"assetCount\",\r",
															"    \"acceptedCount\",\r",
															"    \"submittedCount\",\r",
															"    \"savedCount\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let stig of jsonData){\r",
															"        pm.expect(stig).to.have.all.keys(stigKeys);\r",
															"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "grants/{userId}/access",
									"item": [
										{
											"name": "Return stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigAssetGrantKeys = [\r",
															"    \"benchmarkId\",\r",
															"    \"asset\"\r",
															"]\r",
															"\r",
															"let assetKeys = [\r",
															"    \"name\",\r",
															"    \"assetId\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"\r",
															"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
															"    var regex = new RegExp(assetMatchString);\r",
															"    \r",
															"    for (let stigAssetGrant of jsonData){\r",
															"        pm.expect(stigAssetGrant).to.have.all.keys(stigAssetGrantKeys);\r",
															"        pm.expect(stigAssetGrant.benchmarkId).to.be.oneOf(validStigs);\r",
															"        pm.expect(stigAssetGrant.asset).to.have.all.keys(assetKeys);\r",
															"        \r",
															"        pm.expect(stigAssetGrant.asset.name).to.match(regex);\r",
															"\r",
															"        // pm.expect(stigAssetGrant.asset).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "userId",
															"value": "{{testUserId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Findings",
									"item": [
										{
											"name": "Return the Findings for the specified Collection by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=groupId&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection by cci",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=cci&acceptedOnly=false&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "cci",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection for benchmarkId x ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&benchmarkId={{testBenchmark}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Findings for the specified Collection for asset x ruleId Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/findings?aggregator=ruleId&acceptedOnly=false&assetId={{testAsset}}&projection=assets&projection=groups&projection=rules&projection=stigs&projection=ccis",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"findings"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "acceptedOnly",
															"value": "false"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "projection",
															"value": "assets",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "groups",
															"description": "Optional properties to return"
														},
														{
															"key": "projection",
															"value": "rules"
														},
														{
															"key": "projection",
															"value": "stigs"
														},
														{
															"key": "projection",
															"value": "ccis"
														},
														{
															"key": "projection",
															"value": "poamRarSummary",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"",
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Response JSON is an array with expected length\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
													"",
													"});",
													"",
													"",
													"",
													"",
													"let findingKeys = []",
													"let assetsKeys = [",
													"    \"name\",",
													"    \"assetId\"",
													"]",
													"",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=ruleId/)) {",
													"    findingKeys = [",
													"        \"ruleId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"if (pm.request.url.getQueryString().match(/aggregator=groupId/)) {",
													"    findingKeys = [",
													"        \"groupId\",",
													"        \"title\",",
													"        \"severity\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/aggregator=cci/)) {",
													"    findingKeys = [",
													"        \"cci\",",
													"        \"definition\",",
													"        \"apAcronym\",",
													"        \"assetCount\"",
													"    ]",
													"}",
													"",
													"if (pm.request.url.getQueryString().match(/projection=rules/)) {",
													"    findingKeys.push(\"rules\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=groups/)) {",
													"    findingKeys.push(\"groups\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"    findingKeys.push(\"assets\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"    findingKeys.push(\"stigs\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=ccis/)) {",
													"    findingKeys.push(\"ccis\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=poamRarSummary/)) {",
													"    findingKeys.push(\"poamRarSummary\")",
													"}",
													"",
													"pm.test(\"Each item in response has requested properties and values\", function () {",
													"    for (let item of jsonData){",
													"        pm.test(\"Check if object contains all provided keys\", function () {",
													"            pm.expect(item).to.have.all.keys(findingKeys);",
													"        });",
													"",
													"        if (pm.request.url.getQueryString().match(/workflow=continuous/)) {",
													"            pm.expect(item.workflow).to.eql(\"continuous\");",
													"        }",
													"",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=assets/)) {",
													"            pm.expect(item).to.have.property('assets');",
													"            let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"            var regex = new RegExp(assetMatchString);",
													"            for (let asset of item.assets){",
													"                pm.expect(asset).to.have.all.keys(assetsKeys);",
													"                pm.expect(asset.name).to.match(regex);",
													"",
													"",
													"            }",
													"        }",
													"",
													"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
													"            // console.log(\"checking statistics projection\");",
													"            pm.expect(item).to.have.property('statistics');",
													"            pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
													"",
													"        }",
													"",
													"        // if (user == \"lvl1\"  ) {",
													"            let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));",
													"            for (let stig of item.stigs){",
													"                pm.expect(stig).to.be.oneOf(validStigs);",
													"            // }",
													"",
													"}",
													"",
													"    };",
													"",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									]
								},
								{
									"name": "CKL",
									"item": [
										{
											"name": "Return the Checklist for the supplied Collection and STIG-latest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "latest",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return the Checklist for the supplied Collection and STIG-revStr",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"}\r",
															"\r",
															"pm.test(\"Check for an array of checklist items.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"let checklistLength = pm.environment.get(\"checklistLength\");\r",
															"\r",
															"pm.test(\"Check for an array of correct length.\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
															"    // console.log(\"jsonData:\" + jsonData);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"checklists",
														":benchmarkId",
														":revisionStr"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														},
														{
															"key": "revisionStr",
															"value": "{{testRev}}",
															"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "poam",
									"item": [
										{
											"name": "Return a POAM-like spreadsheet aggregated by groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?aggregator=groupId&date=01%2F01%2F1970&office=MyOffice&status=Ongoing&acceptedOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "groupId",
															"description": "(Required) Aggregate the findings on this property"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Ongoing"
														},
														{
															"key": "acceptedOnly",
															"value": "true"
														},
														{
															"key": "status",
															"value": "",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a POAM-like spreadsheet aggregated by ruleId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Tests are at poam folder level"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/poam?aggregator=ruleId&date=01%2F01%2F1970&office=MyOffice&status=Ongoing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"poam"
													],
													"query": [
														{
															"key": "aggregator",
															"value": "ruleId"
														},
														{
															"key": "date",
															"value": "01%2F01%2F1970"
														},
														{
															"key": "office",
															"value": "MyOffice"
														},
														{
															"key": "status",
															"value": "Ongoing"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "status",
									"item": []
								},
								{
									"name": "Return a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\",\r",
													"    \"description\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"user\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"     // ,\r",
													"    // \"display\",\r",
													"    // \"email\"   \r",
													"]\r",
													"\r",
													"let userKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"displayName\",\r",
													"    \"email\"   \r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"assetCount\",\r",
													"    \"grantCount\",\r",
													"    \"checklistCount\"\r",
													"]\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"    collectionKeys.push(\"assets\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"    collectionKeys.push(\"grants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    collectionKeys.push(\"stigs\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"    collectionKeys.push(\"owners\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"    collectionKeys.push(\"statistics\")\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(collectionKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    var regex = new RegExp(collectionMatchString);\r",
													"    pm.test(\"Check that proper Collections are returned\", function () {\r",
													"        pm.expect(jsonData.name).to.match(regex);\r",
													"    });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=emass/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"emass\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=continuous/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"continuous\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"        var assetRegex = new RegExp(assetMatchString);\r",
													"        for (let asset of jsonData.assets){\r",
													"            pm.expect(asset).to.have.property('name');\r",
													"            pm.expect(asset).to.have.property('assetId');\r",
													"            pm.expect(asset.name).to.match(assetRegex);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        for (let grant of jsonData.grants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        for (let owner of jsonData.owners){\r",
													"            pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Collections various params",
							"item": [
								{
									"name": "Return a list of Collections accessible to the requester TEST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?workflow=emass&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow."
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester No Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester NAME",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?name={{collectionMatchString}}&elevate={{elevated}}&projection=owners&projection=statistics&name-match={{collectionMatchType}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name"
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "name-match",
													"value": "{{collectionMatchType}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester WORKFLOW",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?workflow=emass&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow."
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}:{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections",
													"disabled": true
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a list of Collections accessible to the requester METADATA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?metadata={{metadataKey}}%3A{{metadataValue}}&elevate={{elevated}}&projection=owners&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "{{collectionMatchString}}",
													"description": "Matches a string anywhere in the object name",
													"disabled": true
												},
												{
													"key": "workflow",
													"value": "emass",
													"description": "Match Collections having a specific workflow.",
													"disabled": true
												},
												{
													"key": "metadata",
													"value": "{{metadataKey}}%3A{{metadataValue}}",
													"description": "A query parameter that specifies metadata key:value pairs to select matching Collections"
												},
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "owners",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let user = pm.environment.get(\"user\");",
											"console.log(\"user: \" + user);",
											"",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
											"    user = \"elevated\";",
											"    console.log(\"setting user to 'elevated'\");",
											"}",
											"",
											"if (user == \"bizarroLvl1\" ) {",
											"    pm.test(\"Status should be is 403 for user bizarroLvl1\", function () {",
											"        pm.response.to.have.status(403);",
											"    });",
											"    return;",
											"}",
											"else {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											"if (pm.response.code !== 200) {",
											"    return;",
											"}",
											"",
											"",
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Response JSON is an array with expected length\", function () {",
											"    pm.expect(jsonData).to.be.an('array');",
											"    if (user != \"collectioncreator\" ) {",
											"        pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    }",
											"",
											"});",
											"",
											"let collectionKeys = [",
											"    \"collectionId\",",
											"    \"name\",",
											"    \"description\",",
											"    \"workflow\",",
											"    \"metadata\"",
											"]",
											"",
											"let grantKeys = [",
											"    \"user\",",
											"    \"accessLevel\",",
											"    // \"userId\",",
											"    // \"username\"",
											"]",
											"",
											"let userBasicKeys = [",
											"    // \"user\",",
											"    // \"accessLevel\",",
											"    \"userId\",",
											"    \"username\"",
											"]",
											"",
											"let userKeys = [",
											"    // \"user\",",
											"    // \"accessLevel\",",
											"    \"userId\",",
											"    \"username\",",
											"    \"displayName\",",
											"    \"email\"   ",
											"]",
											"",
											"let stigKeys = [",
											"    \"title\",",
											"    \"ruleCount\",",
											"    \"benchmarkId\",",
											"    \"lastRevisionDate\",",
											"    \"lastRevisionStr\"",
											"]",
											"",
											"let ownerKeys = [",
											"    \"userId\",",
											"    \"username\"",
											"    // ,",
											"    // \"display\",",
											"    // \"email\"",
											"]",
											"",
											"let statisticsKeys = [",
											"    \"created\",",
											"    \"assetCount\",",
											"    \"grantCount\",",
											"    \"checklistCount\"",
											"]",
											"",
											"if (pm.request.url.getQueryString().match(/projection=assets/)) {",
											"    collectionKeys.push(\"assets\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=grants/)) {",
											"    collectionKeys.push(\"grants\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
											"    collectionKeys.push(\"stigs\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"    collectionKeys.push(\"owners\")",
											"}",
											"if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"    collectionKeys.push(\"statistics\")",
											"}",
											"",
											"",
											"",
											"pm.test(\"Each item in response has requested properties and values\", function () {",
											"    for (let item of jsonData){",
											"        pm.test(\"Check if object contains all provided keys\", function () {",
											"            pm.expect(item).to.have.all.keys(collectionKeys);",
											"        });",
											"",
											"        let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"        var regex = new RegExp(collectionMatchString);",
											"        pm.test(\"Check that proper Collection names are returned\", function () {",
											"            pm.expect(item.name).to.match(regex);",
											"        });",
											"",
											"        if (pm.request.url.getQueryString().match(/workflow=emass/)) {",
											"            pm.expect(item.workflow).to.equal(\"emass\");",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/workflow=continuous/)) {",
											"            pm.expect(item.workflow).to.equal(\"continuous\");",
											"        }",
											"",
											"        pm.expect(item).to.have.property('metadata');",
											"        ",
											"        if (pm.request.url.getQueryString().match(/metadata=/)) {",
											"            let metaKey = pm.environment.get(\"metadataKey\");",
											"            let metaValue = pm.environment.get(\"metadataValue\");",
											"            let metaCheckObject = {}",
											"            metaCheckObject[metaKey] = metaValue",
											"            pm.expect(item.metadata).to.include(metaCheckObject);",
											"            // pm.expect(item.metadata).to.have.key({{metadataValue}});",
											"",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=owners/)) {",
											"            pm.expect(item).to.have.property('owners');",
											"            for (let owner of item.owners){",
											"                pm.expect(owner).to.have.all.keys(userKeys);",
											"            }",
											"        }",
											"",
											"        if (pm.request.url.getQueryString().match(/projection=statistics/)) {",
											"            // console.log(\"checking statistics projection\");",
											"            pm.expect(item).to.have.property('statistics');",
											"            pm.expect(item.statistics).to.have.all.keys(statisticsKeys);",
											"",
											"        }",
											"",
											"    };",
											"",
											"});",
											"",
											"",
											"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");",
											"// // console.log(\"collection string = \" + collectionMatchString);",
											"// var regex = new RegExp(collectionMatchString);",
											"// let collectionNames = _.map(jsonData, 'name');",
											"// // console.log(collectionNames);",
											"",
											"// pm.test(\"Check that proper Collections are returned\", function () {",
											"//     for (let name of collectionNames){",
											"//         pm.expect(name).to.match(regex);",
											"//         console.log(\"checking \" + name + \" against regex \" + collectionMatchString + \".\" );",
											"",
											"//     }",
											" ",
											"// })",
											"",
											"",
											"",
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Asset GET",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "users",
													"item": []
												}
											]
										},
										{
											"name": "Return an Asset's STIG assignments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"bizarroLvl1\" ) {\r",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"\r",
															"// else if (user == \"collectioncreator\" ) {\r",
															"//     pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
															"//         pm.response.to.have.status(204);\r",
															"//     });\r",
															"//     return;\r",
															"// }\r",
															"\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"let stigKeys = [\r",
															"    \"title\",\r",
															"    \"ruleCount\",\r",
															"    \"benchmarkId\",\r",
															"    \"lastRevisionDate\",\r",
															"    \"lastRevisionStr\"\r",
															"]\r",
															"\r",
															"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
															"\r",
															"pm.test(\"Response has requested properties and values\", function () {\r",
															"    for (let item of jsonData){\r",
															"        pm.expect(item).to.have.all.keys(stigKeys);\r",
															"        pm.expect(item.benchmarkId).to.be.oneOf(validStigs);\r",
															"\r",
															"    };\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Return an Asset (with StigGrants projection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user === \"elevated\" || user === \"lvl3\" || user === \"lvl4\" ) {\r",
													"    pm.test(\"Status should be is 200 \", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"mac\",\r",
													"    \"fqdn\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"acceptedCount\",\r",
													"    \"submittedCount\",\r",
													"    \"savedCount\",\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigGrants).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (with StigGrants projection) - Asset - no assigned STIGs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user === \"elevated\" || user === \"lvl3\" || user === \"lvl4\" ) {\r",
													"    pm.test(\"Status should be is 200 \", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"mac\",\r",
													"    \"fqdn\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"acceptedCount\",\r",
													"    \"submittedCount\",\r",
													"    \"savedCount\",\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        \r",
													"        pm.expect(jsonData.stigGrants).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset-NoStigs}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (without StigGrants projection)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, or bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"mac\",\r",
													"    \"fqdn\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"acceptedCount\",\r",
													"    \"submittedCount\",\r",
													"    \"savedCount\",\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return an Asset (without StigGrants projection) - Asset - no assigned STIGs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//normal test start block:\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"collectioncreator\") {\r",
													"    pm.test(\"Status should be is 403 for user lvl1, collectionCreator, and bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"let assetKeys = [\r",
													"    \"assetId\",\r",
													"    \"name\",\r",
													"    \"collection\",\r",
													"    \"description\",\r",
													"    \"ip\",\r",
													"    \"mac\",\r",
													"    \"fqdn\",\r",
													"    \"noncomputing\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"workflow\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"users\",\r",
													"    \"benchmarkId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    // \"user\",\r",
													"    // \"accessLevel\",\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let adminStatsKeys = [\r",
													"    \"acceptedCount\",\r",
													"    \"submittedCount\",\r",
													"    \"savedCount\",\r",
													"    \"ruleCount\",\r",
													"    \"stigCount\",\r",
													"    \"stigAssignedCount\"\r",
													"]\r",
													"\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"    assetKeys.push(\"adminStats\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"    assetKeys.push(\"stigGrants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    assetKeys.push(\"stigs\")\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(jsonData.name).to.match(regex);\r",
													"\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"        for (let grant of jsonData.stigGrants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"            for (let user of grant.users){\r",
													"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"\r",
													"        pm.expect(jsonData.stigs).to.be.an(\"array\").of.length(0)\r",
													"\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
													"\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
													"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset-NoStigs}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG JSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"}\r",
													"\r",
													"pm.test(\"Check for an array of checklist items.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array');\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"\r",
													"pm.test(\"Check for an array of correct length.\", function () {\r",
													"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
													"    // console.log(\"jsonData:\" + jsonData);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "json",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and STIG XML (.ckl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "format",
													"value": "ckl",
													"description": "The format of the response. Default if missing is 'json'"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												},
												{
													"key": "revisionStr",
													"value": "{{testRev}}",
													"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Return the Checklist for the supplied Asset and MULTI-STIG XML (.CKL) - no specified stigs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"const xml2js = require('xml2js');\r",
													"\r",
													"\r",
													"if (user == \"bizarroLvl1\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else if (user == \"collectioncreator\" ) {\r",
													"    pm.test(\"Status should be is 403 for user collectioncreator\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let cklData;\r",
													"\r",
													" xml2js.parseString(pm.response.text(), function (err, result) {\r",
													"        cklData = result;\r",
													"        // console.log(result);\r",
													"    });\r",
													"\r",
													"\r",
													"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
													"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
													"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
													"// console.log(cklSiData);\r",
													"\r",
													"\r",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
													"\r",
													"pm.test(\"Response has allowed asset\", function () {\r",
													"\r",
													"    var regex = new RegExp(assetMatchString);\r",
													"    pm.expect(cklHostName).to.match(regex);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
													"let currentStigId;\r",
													"\r",
													"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length.\", function () {\r",
													"\r",
													"    for (let iStig of cklIStigs){\r",
													"\r",
													"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
													"            // console.log (cklSiDatum.SID_NAME[0])\r",
													"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
													"                console.log (cklSiDatum.SID_NAME[0])\r",
													"                console.log (cklSiDatum.SID_DATA[0])\r",
													"                currentStigId = cklSiDatum.SID_DATA[0]\r",
													"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"        let cklVulns = iStig.VULN;\r",
													"\r",
													"        pm.expect(cklVulns).to.be.an('array');\r",
													"\r",
													"        // Right now, only VPN_SRG has a checklist length\r",
													"        if (currentStigId == 'VPN_SRG') {\r",
													"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
													"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												""
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{testAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return a list of Assets accessible to the requester (with STIG grants projection)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" || user == \"lvl1\" || user == \"lvl2\" || user == \"globular\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionKeys = [\r",
											"    \"collectionId\",\r",
											"    \"name\",\r",
											"    \"workflow\"\r",
											"]\r",
											"let assetKeys = [\r",
											"    \"assetId\",\r",
											"    \"name\",\r",
											"    \"collection\",\r",
											"    \"description\",\r",
											"    \"ip\",\r",
											"    \"mac\",\r",
											"    \"fqdn\",\r",
											"    \"noncomputing\",\r",
											"    \"metadata\"\r",
											"    \r",
											"]\r",
											"\r",
											"let stigKeys = [\r",
											"    \"title\",\r",
											"    \"ruleCount\",\r",
											"    \"benchmarkId\",\r",
											"    \"lastRevisionDate\",\r",
											"    \"lastRevisionStr\"\r",
											"]\r",
											"\r",
											"let stigGrantKeys = [\r",
											"    \"benchmarkId\",\r",
											"    \"users\"\r",
											"]\r",
											"\r",
											"let adminStatsKeys = [\r",
											"    \"acceptedCount\",\r",
											"    \"submittedCount\",\r",
											"    \"savedCount\",\r",
											"    \"ruleCount\",\r",
											"    \"stigCount\",\r",
											"    \"stigAssignedCount\"\r",
											"]\r",
											"let userBasicKeys = [\r",
											"    // \"user\",\r",
											"    // \"accessLevel\",\r",
											"    \"userId\",\r",
											"    \"username\"\r",
											"]\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    assetKeys.push(\"stigs\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"    assetKeys.push(\"adminStats\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    assetKeys.push(\"stigGrants\")\r",
											"}\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"            pm.expect(asset.adminStats).to.have.all.keys(adminStatsKeys);\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// console.log(returnedAssetIds)\r",
											"// console.log(Asset_NoStigs)\r",
											"\r",
											"// if (user != \"lvl1\") {\r",
											"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Assets accessible to the requester - No StigGrants (for lvl1 user success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionKeys = [\r",
											"    \"collectionId\",\r",
											"    \"name\",\r",
											"    \"workflow\"\r",
											"]\r",
											"let assetKeys = [\r",
											"    \"assetId\",\r",
											"    \"name\",\r",
											"    \"collection\",\r",
											"    \"description\",\r",
											"    \"ip\",\r",
											"    \"mac\",\r",
											"    \"fqdn\",\r",
											"    \"noncomputing\",\r",
											"    \"metadata\"\r",
											"    \r",
											"]\r",
											"\r",
											"let stigKeys = [\r",
											"    \"title\",\r",
											"    \"ruleCount\",\r",
											"    \"benchmarkId\",\r",
											"    \"lastRevisionDate\",\r",
											"    \"lastRevisionStr\"\r",
											"]\r",
											"\r",
											"let stigGrantKeys = [\r",
											"    \"benchmarkId\",\r",
											"    \"users\"\r",
											"]\r",
											"\r",
											"let adminStatsKeys = [\r",
											"    \"acceptedCount\",\r",
											"    \"submittedCount\",\r",
											"    \"savedCount\",\r",
											"    \"ruleCount\",\r",
											"    \"stigCount\",\r",
											"    \"stigAssignedCount\"\r",
											"]\r",
											"let userBasicKeys = [\r",
											"    // \"user\",\r",
											"    // \"accessLevel\",\r",
											"    \"userId\",\r",
											"    \"username\"\r",
											"]\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    assetKeys.push(\"stigs\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"    assetKeys.push(\"adminStats\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    assetKeys.push(\"stigGrants\")\r",
											"}\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"            pm.expect(asset.adminStats).to.have.all.keys(adminStatsKeys);\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"// console.log(returnedAssetIds)\r",
											"// console.log(Asset_NoStigs)\r",
											"\r",
											"// if (user != \"lvl1\") {\r",
											"//     pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"//         pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&benchmarkId={{testBenchmark}}&elevate={{elevated}}&projection=adminStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Assets accessible to the requester - No filters or StigGrants (for lvl1 user success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"collectioncreator\" || user == \"bizarroLvl1\") {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, Lvl1, or bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionKeys = [\r",
											"    \"collectionId\",\r",
											"    \"name\",\r",
											"    \"workflow\"\r",
											"]\r",
											"let assetKeys = [\r",
											"    \"assetId\",\r",
											"    \"name\",\r",
											"    \"collection\",\r",
											"    \"description\",\r",
											"    \"ip\",\r",
											"    \"mac\",\r",
											"    \"fqdn\",\r",
											"    \"noncomputing\",\r",
											"    \"metadata\"\r",
											"    \r",
											"]\r",
											"\r",
											"let stigKeys = [\r",
											"    \"title\",\r",
											"    \"ruleCount\",\r",
											"    \"benchmarkId\",\r",
											"    \"lastRevisionDate\",\r",
											"    \"lastRevisionStr\"\r",
											"]\r",
											"\r",
											"let stigGrantKeys = [\r",
											"    \"benchmarkId\",\r",
											"    \"users\"\r",
											"]\r",
											"\r",
											"let adminStatsKeys = [\r",
											"    \"acceptedCount\",\r",
											"    \"submittedCount\",\r",
											"    \"savedCount\",\r",
											"    \"ruleCount\",\r",
											"    \"stigCount\",\r",
											"    \"stigAssignedCount\"\r",
											"]\r",
											"let userBasicKeys = [\r",
											"    // \"user\",\r",
											"    // \"accessLevel\",\r",
											"    \"userId\",\r",
											"    \"username\"\r",
											"]\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"    assetKeys.push(\"stigs\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"    assetKeys.push(\"adminStats\")\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    assetKeys.push(\"stigGrants\")\r",
											"}\r",
											"\r",
											"let returnedAssetIds=[];\r",
											"let Asset_NoStigs = pm.environment.get(\"testAsset-NoStigs\");\r",
											"\r",
											"pm.test(\"assets have expected properties and values\", function () {\r",
											"    let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    for (let asset of jsonData){\r",
											"\r",
											"        pm.expect(asset).to.have.all.keys(assetKeys);\r",
											"        pm.expect(asset.name).to.match(regex);\r",
											"        returnedAssetIds.push(asset.assetId);\r",
											"        pm.expect(asset.collection).to.have.all.keys(collectionKeys);\r",
											"\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
											"            pm.expect(asset.adminStats).to.have.all.keys(adminStatsKeys);\r",
											"        }\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"            for (let stig of asset.stigs){\r",
											"                pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            }\r",
											"        }\r",
											"\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"        for (let grant of asset.stigGrants){\r",
											"            pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"            pm.expect(grant.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"            for (let user of grant.users){\r",
											"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
											"        let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"\r",
											"        if(asset.assetId == Asset_NoStigs) {\r",
											"            pm.expect(asset.stigs).to.be.an(\"array\").of.length(0)\r",
											"        }\r",
											"        else{\r",
											"            pm.expect(asset.stigs).to.be.an(\"array\").of.length.at.least(1)\r",
											"        }\r",
											"\r",
											"        for (let stig of asset.stigs){\r",
											"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
											"            pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
											"\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"        // if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        //     for (let grant of asset.stigGrants){\r",
											"        //         pm.expect(grant).to.have.all.keys(stigGrantKeys);\r",
											"        //         for (let user of grant.users){\r",
											"        //             pm.expect(user).to.have.all.keys(userBasicKeys);\r",
											"        //         }\r",
											"        //     }\r",
											"        // }\r",
											"\r",
											"    };\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"console.log(returnedAssetIds)\r",
											"console.log(Asset_NoStigs)\r",
											"\r",
											"if (user == \"lvl1\") {\r",
											"    pm.test(\"check for asset with no assigned stig (edge case, lvl1 should not get this asset)\", function () {\r",
											"        pm.expect(returnedAssetIds).to.not.include(Asset_NoStigs);\r",
											"\r",
											"    });\r",
											"}\r",
											"else{  \r",
											"    pm.test(\"check for asset with no assigned stig (edge case)\", function () {\r",
											"        pm.expect(returnedAssetIds).to.include(Asset_NoStigs);\r",
											"\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?collectionId={{testCollection}}&elevate={{elevated}}&projection=adminStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"description": "(Required) Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews GET",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "Return the Review for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"let reviewKeys = [\r",
																	"\"assetId\",\r",
																	"\"assetName\",\r",
																	"\"ruleId\",\r",
																	"\"result\",\r",
																	"\"resultComment\",\r",
																	"\"autoResult\",\r",
																	"\"action\",\r",
																	"\"actionComment\",\r",
																	"\"status\",\r",
																	"\"userId\",\r",
																	"\"username\",\r",
																	"\"ts\",\r",
																	"\"rejectText\",\r",
																	"\"rejectUserId\",\r",
																	"\"reviewComplete\"\r",
																	"]\r",
																	"\r",
																	"let historyKeys = [\r",
																	"    \"ts\",\r",
																	"    \"result\",\r",
																	"    \"resultComment\",\r",
																	"    \"autoResult\",\r",
																	"    \"action\",\r",
																	"    \"actionComment\",\r",
																	"    \"status\",\r",
																	"    \"userId\",\r",
																	"    \"username\",\r",
																	"    \"rejectText\"\r",
																	"]\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
																	"    reviewKeys.push(\"stigs\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=history/)) {\r",
																	"    reviewKeys.push(\"history\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=rule/)) {\r",
																	"    reviewKeys.push(\"rule\")\r",
																	"}\r",
																	"if (pm.request.url.getQueryString().match(/projection=metadata/)) {\r",
																	"    reviewKeys.push(\"metadata\")\r",
																	"}\r",
																	"pm.test(\"Check if object contains all provided keys\", function () {\r",
																	"    pm.expect(jsonData).to.have.all.keys(reviewKeys);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check if object contains proper ruleId\", function () {\r",
																	"    let testRuleId = pm.environment.get(\"testRuleId\");\r",
																	"    pm.expect(jsonData.ruleId).to.eql(testRuleId);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check review comment for regex match string\", function () {\r",
																	"    let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"    var regex = new RegExp(reviewMatchString);\r",
																	"    pm.expect(jsonData.resultComment).to.match(regex);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "history"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "rule"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataKey = pm.environment.get(\"testMetadataKey\");\r",
																	"    let testMetadataValue = pm.environment.get(\"testMetadataValue\");\r",
																	"    pm.expect(jsonData[testMetadataKey]).to.eql(testMetadataValue);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.resultComment).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata KEYS for an Asset and Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataKey = pm.environment.get(\"testMetadataKey\");\r",
																	"    pm.expect(jsonData).to.include(testMetadataKey);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.resultComment).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return the Review Metadata VALUE for an Asset/Rule/metadata KEY",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
																	"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('string');\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check if review metadata object contains proper metadata\", function () {\r",
																	"    let testMetadataValue = pm.environment.get(\"testMetadataValue\");\r",
																	"    pm.expect(jsonData).to.eql(testMetadataValue);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Check review comment for regex match string\", function () {\r",
																	"//     let reviewMatchString = pm.environment.get(\"reviewMatchString\");\r",
																	"//     var regex = new RegExp(reviewMatchString);\r",
																	"//     pm.expect(jsonData.resultComment).to.match(regex);\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reviews by Asset; Parameter variations",
											"item": [
												{
													"name": "Return a list of Reviews for an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT Fail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=fail&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "fail"
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset RESULT pass",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?result=pass&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass"
																},
																{
																	"key": "action",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset ACTION Remediate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?action=remediate&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate"
																},
																{
																	"key": "status",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS saved",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=saved&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "saved"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset STATUS submitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?status=submitted&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted"
																},
																{
																	"key": "benchmarkId",
																	"value": "<string>",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset BENCHMARK",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG"
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of Reviews for an Asset BENCHMARK - metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs&projection=metadata&metadata={{testMetadataKey}}%3A{{testMetadataValue}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId"
															],
															"query": [
																{
																	"key": "result",
																	"value": "pass",
																	"disabled": true
																},
																{
																	"key": "action",
																	"value": "remediate",
																	"disabled": true
																},
																{
																	"key": "status",
																	"value": "submitted",
																	"disabled": true
																},
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "A query parameter that indentifies a STIG",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																},
																{
																	"key": "metadata",
																	"value": "{{testMetadataKey}}%3A{{testMetadataValue}}"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"let user = pm.environment.get(\"user\");",
															"console.log(\"user: \" + user);",
															"",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
															"    user = \"elevated\";",
															"    console.log(\"setting user to 'elevated'\");",
															"}",
															"",
															"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
															"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
															"        pm.response.to.have.status(403);",
															"    });",
															"    return;",
															"}",
															"else {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"}",
															"if (pm.response.code !== 200) {",
															"    return;",
															"}",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(\"Response JSON is an array\", function () {",
															"    pm.expect(jsonData).to.be.an('array').of.length.greaterThan(0)",
															"});",
															"",
															"let reviewKeys = [",
															"\"assetId\",",
															"\"assetName\",",
															"\"ruleId\",",
															"\"result\",",
															"\"resultComment\",",
															"\"autoResult\",",
															"\"action\",",
															"\"actionComment\",",
															"\"status\",",
															"\"userId\",",
															"\"username\",",
															"\"ts\",",
															"\"rejectText\",",
															"\"rejectUserId\",",
															"\"reviewComplete\"",
															"]",
															"",
															"let historyKeys = [",
															"    \"ts\",",
															"    \"result\",",
															"    \"resultComment\",",
															"    \"autoResult\",",
															"    \"action\",",
															"    \"actionComment\",",
															"    \"status\",",
															"    \"userId\",",
															"    \"username\",",
															"    \"rejectText\"",
															"]",
															"",
															"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
															"    reviewKeys.push(\"stigs\")",
															"}",
															"if (pm.request.url.getQueryString().match(/projection=rule/)) {",
															"    reviewKeys.push(\"rule\")",
															"}",
															"if (pm.request.url.getQueryString().match(/projection=metadata/)) {",
															"    reviewKeys.push(\"metadata\")",
															"}",
															"let testAsset = pm.environment.get(\"testAsset\");",
															"",
															"pm.test(\"Check if each object contains expected keys/values\", function () {",
															"    for (let review of jsonData){",
															"        pm.expect(review).to.have.all.keys(reviewKeys);",
															"        pm.expect(review.assetId).to.equal(testAsset);",
															"",
															"        let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
															"        let regex = new RegExp(reviewMatchString);",
															"        pm.expect(review.resultComment).to.match(regex);",
															"",
															"        if (pm.request.url.getQueryString().match(/result=/)) {",
															"            let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
															"            pm.expect(review.result).to.equal(param);",
															"        }",
															"        if (pm.request.url.getQueryString().match(/action=/)) {",
															"            let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];",
															"            pm.expect(review.action).to.equal(param);",
															"        }",
															"        if (pm.request.url.getQueryString().match(/status=/)) {",
															"            let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
															"            pm.expect(review.status).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/ruleId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
															"            pm.expect(review.ruleId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/groupId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
															"            pm.expect(review.groupId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/cci=/)) {",
															"            let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
															"            pm.expect(review.cci).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/userId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
															"            pm.expect(review.userId).to.equal(param);",
															"        }    ",
															"        if (pm.request.url.getQueryString().match(/assetId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
															"            pm.expect(review.assetId).to.equal(param);",
															"        }        ",
															"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
															"            let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
															"            pm.expect(review.stigs[0]).to.equal(param);",
															"        }    ",
															"    }",
															"})",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Reviews; Parameter Variations",
									"item": [
										{
											"name": "Return a list of Reviews accessible to the requester",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "action",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester RESULT fail",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=fail&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail"
														},
														{
															"key": "action",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester ACTION remediate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?action=remediate&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate"
														},
														{
															"key": "status",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester STATUS saved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?status=saved&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved"
														},
														{
															"key": "ruleId",
															"value": "<string>",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester RULEID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?ruleId={{testRuleId}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule"
														},
														{
															"key": "groupId",
															"value": "<string>",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "<string>",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester USERID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?userId={{testUserId}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User"
														},
														{
															"key": "assetId",
															"value": "<string>",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester ASSETID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?assetId={{testAsset}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset"
														},
														{
															"key": "benchmarkId",
															"value": "<string>",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester BENCHMARKID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?benchmarkId={{testBenchmark}}&projection=rule&projection=stigs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG"
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Return a list of Reviews accessible to the requester - metadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs&metadata={{testMetadataKey}}%3A{{testMetadataValue}}&projection=metadata",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews"
													],
													"query": [
														{
															"key": "result",
															"value": "fail",
															"disabled": true
														},
														{
															"key": "action",
															"value": "remediate",
															"disabled": true
														},
														{
															"key": "status",
															"value": "saved",
															"disabled": true
														},
														{
															"key": "ruleId",
															"value": "{{testRuleId}}",
															"description": "Selects Reviews of a Rule",
															"disabled": true
														},
														{
															"key": "groupId",
															"value": "{{testGroupId}}",
															"description": "A query parameter that indentifies a Group",
															"disabled": true
														},
														{
															"key": "cci",
															"value": "{{testCci}}",
															"description": "A query parameter that indentifies a CCI",
															"disabled": true
														},
														{
															"key": "userId",
															"value": "{{testUserId}}",
															"description": "A path parameter that indentifies a User",
															"disabled": true
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}",
															"description": "A query parameter that indentifies an Asset",
															"disabled": true
														},
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "A query parameter that indentifies a STIG",
															"disabled": true
														},
														{
															"key": "projection",
															"value": "rule",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "projection",
															"value": "stigs",
															"description": "Additional properties to include in the response.\n"
														},
														{
															"key": "metadata",
															"value": "{{testMetadataKey}}%3A{{testMetadataValue}}"
														},
														{
															"key": "projection",
															"value": "metadata"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}",
															"description": "(Required) A path parameter that indentifies a Collection"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let user = pm.environment.get(\"user\");",
													"console.log(\"user: \" + user);",
													"",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
													"    user = \"elevated\";",
													"    console.log(\"setting user to 'elevated'\");",
													"}",
													"",
													"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {",
													"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {",
													"        pm.response.to.have.status(403);",
													"    });",
													"    return;",
													"}",
													"else {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"if (pm.response.code !== 200) {",
													"    return;",
													"}",
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Response JSON is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array').of.length.greaterThan(0)",
													"});",
													"",
													"let reviewKeys = [",
													"\"assetId\",",
													"\"assetName\",",
													"\"ruleId\",",
													"\"result\",",
													"\"resultComment\",",
													"\"autoResult\",",
													"\"action\",",
													"\"actionComment\",",
													"\"status\",",
													"\"userId\",",
													"\"username\",",
													"\"ts\",",
													"\"rejectText\",",
													"\"rejectUserId\",",
													"\"reviewComplete\"",
													"]",
													"",
													"let historyKeys = [",
													"    \"ts\",",
													"    \"result\",",
													"    \"resultComment\",",
													"    \"autoResult\",",
													"    \"action\",",
													"    \"actionComment\",",
													"    \"status\",",
													"    \"userId\",",
													"    \"username\",",
													"    \"rejectText\"",
													"]",
													"",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {",
													"    reviewKeys.push(\"stigs\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=rule/)) {",
													"    reviewKeys.push(\"rule\")",
													"}",
													"if (pm.request.url.getQueryString().match(/projection=metadata/)) {",
													"    reviewKeys.push(\"metadata\")",
													"}",
													"let reviewMatchString = pm.environment.get(\"reviewMatchString\");",
													"let reviewRegex = new RegExp(reviewMatchString);",
													"let assetMatchString = pm.environment.get(\"assetMatchString\");",
													"let assetRegex = new RegExp(assetMatchString);",
													"",
													"pm.test(\"Check if each object contains expected keys/values\", function () {",
													"",
													"    for (let review of jsonData){",
													"        pm.expect(review).to.have.all.keys(reviewKeys);",
													"",
													"        pm.expect(review.resultComment).to.match(reviewRegex);",
													"        ",
													"        pm.expect(review.assetName).to.match(assetRegex);",
													"",
													"        if (pm.request.url.getQueryString().match(/result=/)) {",
													"            let param = pm.request.url.getQueryString().match(/result=([^&]+)&/)[1];",
													"            pm.expect(review.result).to.equal(param);",
													"        }",
													"        if (pm.request.url.getQueryString().match(/action=/)) {",
													"            let param = pm.request.url.getQueryString().match(/action=([^&]+)&/)[1];",
													"            pm.expect(review.action).to.equal(param);",
													"        }",
													"        if (pm.request.url.getQueryString().match(/status=/)) {",
													"            let param = pm.request.url.getQueryString().match(/status=([^&]+)&/)[1];",
													"            pm.expect(review.status).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/ruleId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/ruleId=([^&]+)&/)[1];",
													"            pm.expect(review.ruleId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/groupId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/groupId=([^&]+)&/)[1];",
													"            pm.expect(review.rule.groupId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/cci=/)) {",
													"            let param = pm.request.url.getQueryString().match(/cci=([^&]+)&/)[1];",
													"            pm.expect(review.cci).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/userId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/userId=([^&]+)&/)[1];",
													"            pm.expect(review.userId).to.equal(param);",
													"        }    ",
													"        if (pm.request.url.getQueryString().match(/assetId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/assetId=([^&]+)&/)[1];",
													"            pm.expect(review.assetId).to.equal(param);",
													"        }        ",
													"        if (pm.request.url.getQueryString().match(/benchmarkId=/)) {",
													"            let param = pm.request.url.getQueryString().match(/benchmarkId=([^&]+)&/)[1];",
													"            pm.expect(review.stigs[0]).to.equal(param);",
													"        }    ",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users GET",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Return a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"elevated\") { //placeholder for \"users\" that should fail. this endpoint is \"elevated\" only\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"// START AZDO #151\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    // \"display\",\r",
													"    // \"email\",\r",
													"    // \"metadata\",\r",
													"    // \"privileges\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"// END AZDO #151\r",
													"\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\",\r",
													"    \"collectionGrantCount\",\r",
													"    \"lastClaims\"\r",
													"]\r",
													"let privilegesKeys = [\r",
													"    \"canAdmin\",\r",
													"    \"canCreateCollection\"\r",
													"]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"// START AZDO #151\r",
													"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
													"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
													"// });\r",
													"// END AZDO #151\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"let testUserId = pm.environment.get(\"testUserId\");\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    pm.expect(jsonData.userId).to.equal(testUserId);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{testUserId}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return a list of Users accessible to the requester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"// START AZDO #151\r",
											"let userKeys = [\r",
											"    \"userId\",\r",
											"    \"username\",\r",
											"    // \"display\",\r",
											"    // \"email\",\r",
											"    // \"metadata\",\r",
											"    // \"privileges\",\r",
											"    \"collectionGrants\",\r",
											"    \"statistics\"\r",
											"]\r",
											"// END AZDO #151\r",
											"\r",
											"let collectionGrantKeys = [\r",
											"    \"collection\",\r",
											"    \"accessLevel\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let collectionKeys = [\r",
											"    \"name\",\r",
											"    \"collectionId\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let statisticsKeys = [\r",
											"    \"created\",\r",
											"    \"lastAccess\",\r",
											"    \"collectionGrantCount\",\r",
											"    \"lastClaims\"\r",
											"]\r",
											"let privilegesKeys = [\r",
											"    \"canAdmin\",\r",
											"    \"canCreateCollection\"\r",
											"]\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        // START AZDO #151\r",
											"        // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"        //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"        // });\r",
											"        // END AZDO #151\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)",
											"disabled": true
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"// START AZDO #151\r",
											"let userKeys = [\r",
											"    \"userId\",\r",
											"    \"username\",\r",
											"    // \"display\",\r",
											"    // \"email\",\r",
											"    // \"metadata\",\r",
											"    // \"privileges\",\r",
											"    \"collectionGrants\",\r",
											"    \"statistics\"\r",
											"]\r",
											"// END AZDO #151\r",
											"\r",
											"let collectionGrantKeys = [\r",
											"    \"collection\",\r",
											"    \"accessLevel\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let collectionKeys = [\r",
											"    \"name\",\r",
											"    \"collectionId\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let statisticsKeys = [\r",
											"    \"created\",\r",
											"    \"lastAccess\",\r",
											"    \"collectionGrantCount\",\r",
											"    \"lastClaims\"\r",
											"]\r",
											"let privilegesKeys = [\r",
											"    \"canAdmin\",\r",
											"    \"canCreateCollection\"\r",
											"]\r",
											"\r",
											"\r",
											"pm.test(\"Check if each object contains expected keys/values\", function () {\r",
											"\r",
											"    for (let user of jsonData){\r",
											"        pm.test(\"Check if object contains all required keys\", function () {\r",
											"            pm.expect(user).to.have.all.keys(userKeys);\r",
											"        });\r",
											"\r",
											"        if (pm.request.url.getQueryString().match(/username=/)) {\r",
											"            let testUser = pm.environment.get(\"testUser\");\r",
											"            pm.test(\"Check if object contains info for expected user\", function () {\r",
											"                pm.expect(user.username).to.equal(testUser);\r",
											"            });\r",
											"        }\r",
											"        \r",
											"        for (let grant of user.collectionGrants){\r",
											"            pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"            pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"        }\r",
											"\r",
											"        // START AZDO #151\r",
											"        // pm.test(\"Check if object contains all required privileges keys\", function () {\r",
											"        //     pm.expect(user.privileges).to.have.all.keys(privilegesKeys);\r",
											"        // });\r",
											"        // END AZDO #151\r",
											"\r",
											"        pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"            pm.expect(user.statistics).to.have.all.keys(statisticsKeys);\r",
											"        });\r",
											"\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of Users accessible to the requester USERNAME - NO PROJECTIONS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&username={{testUser}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "{{testUser}}",
											"description": "A query parameter that filters on a username"
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "op GET",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Export application data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user != \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "elevate",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return API version and configuration information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let configKeys = [\r",
											"    \"version\",\r",
											"    \"commit\"\r",
											"]\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/op/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"configuration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Return the requester's user information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let userKeys = [\r",
									"    \"userId\",\r",
									"    \"username\",\r",
									"    // \"display\",\r",
									"    // \"email\",\r",
									"    // \"metadata\",\r",
									"    // \"privileges\",\r",
									"    \"collectionGrants\",\r",
									"    \"statistics\"\r",
									"]\r",
									"let collectionGrantKeys = [\r",
									"    \"collection\",\r",
									"    \"accessLevel\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let collectionKeys = [\r",
									"    \"name\",\r",
									"    \"collectionId\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let statisticsKeys = [\r",
									"    \"created\",\r",
									"    \"lastAccess\",\r",
									"    \"collectionGrantCount\",\r",
									"    \"lastClaims\"\r",
									"]\r",
									"let privilegesKeys = [\r",
									"    \"canAdmin\",\r",
									"    \"canCreateCollection\"\r",
									"]\r",
									"\r",
									"// START AZDO #151\r",
									"// pm.test(\"Check if object contains all required keys\", function () {\r",
									"//     pm.expect(jsonData).to.have.all.keys(userKeys);\r",
									"// });\r",
									"\r",
									"// for (let grant of jsonData.collectionGrants){\r",
									"//     pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
									"//     pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
									"// }\r",
									"\r",
									"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
									"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Check if object contains all required statistics keys\", function () {\r",
									"//     pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
									"// });\r",
									"// STOP AZDO #151\r",
									"\r",
									"pm.test(\"Check if object contains info for expected user\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(user);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			],
			"description": "All tests that do not change data."
		},
		{
			"name": "POSTS, Puts, Patches, and Deletes",
			"item": [
				{
					"name": "Prep Data",
					"item": [
						{
							"name": "Import and overwrite application data PREP FOR UPDATE TESTS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection PPPD",
					"item": [
						{
							"name": "{collection Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}/assets",
											"item": [
												{
													"name": "Set the Assets mapped to a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array with expected length\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"{{scrapAsset}}\"\n    ]\n"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?elevate={{elevated}}&projection=restrictedUserAccess",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"stigs",
																":benchmarkId",
																"assets"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																},
																{
																	"key": "projection",
																	"value": "restrictedUserAccess",
																	"description": "Additional properties to include in the response.\n"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{scrapCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "grants/{userId}/access PPPD",
									"item": [
										{
											"name": "set stig-asset grants for a lvl1 user in this collection.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 404\", function () {\r",
															"        pm.response.to.have.status(404);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array with expected length\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"benchmarkId\": \"{{scrapBenchmark}}\",\r\n        \"assetId\": \"{{scrapAsset}}\"\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/grants/:userId/access",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"grants",
														":userId",
														"access"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{scrapCollection}}"
														},
														{
															"key": "userId",
															"value": "{{scrapLvl1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Merge provided properties with a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{scrapCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a Collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Same tests as for GET /collection/{collectionId}\r",
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"lvl3\" || user == \"globular\" || user == \"collectioncreator\" ) { \r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let collectionKeys = [\r",
													"    \"collectionId\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"workflow\",\r",
													"    \"metadata\"\r",
													"]\r",
													"\r",
													"let grantKeys = [\r",
													"    \"user\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"\r",
													"let userBasicKeys = [\r",
													"    \"userId\",\r",
													"    \"username\"\r",
													"    // \"userId\",\r",
													"    // \"username\",\r",
													"    // \"display\",\r",
													"    // \"email\"    \r",
													"]\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"displayName\",\r",
													"    \"email\"    \r",
													"]\r",
													"\r",
													"let stigKeys = [\r",
													"    \"title\",\r",
													"    \"ruleCount\",\r",
													"    \"benchmarkId\",\r",
													"    \"lastRevisionDate\",\r",
													"    \"lastRevisionStr\"\r",
													"]\r",
													"\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"assetCount\",\r",
													"    \"grantCount\",\r",
													"    \"checklistCount\"\r",
													"]\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"    collectionKeys.push(\"assets\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"    collectionKeys.push(\"grants\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"    collectionKeys.push(\"stigs\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"    collectionKeys.push(\"owners\")\r",
													"}\r",
													"if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"    collectionKeys.push(\"statistics\")\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all provided keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(collectionKeys);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has requested properties and values\", function () {\r",
													"    // for (let item of jsonData){\r",
													"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"    // var regex = new RegExp(collectionMatchString);\r",
													"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
													"    //     pm.expect(jsonData.name).to.match(regex);\r",
													"    // });\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=emass/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"emass\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/workflow=continuous/)) {\r",
													"        pm.expect(jsonData.workflow).to.eql(\"continuous\");\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=assets/)) {\r",
													"        for (let asset of jsonData.assets){\r",
													"            pm.expect(asset).to.have.property('name');\r",
													"            pm.expect(asset).to.have.property('assetId');\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=grants/)) {\r",
													"        for (let grant of jsonData.grants){\r",
													"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
													"            pm.expect(grant.user).to.have.all.keys(userBasicKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
													"        for (let stig of jsonData.stigs){\r",
													"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=owners/)) {\r",
													"        // console.log(\"checking owners projection\");\r",
													"        for (let owner of jsonData.owners){\r",
													"            pm.expect(owner).to.have.all.keys(userKeys);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    if (pm.request.url.getQueryString().match(/projection=statistics/)) {\r",
													"        // console.log(\"checking statistics projection\");\r",
													"        pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"    }\r",
													"\r",
													"    // };\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
													"// // console.log(\"collection string = \" + collectionMatchString);\r",
													"// var regex = new RegExp(collectionMatchString);\r",
													"// // let collectionNames = _.map(jsonData, 'name');\r",
													"// // console.log(jsonData.name);\r",
													"\r",
													"// pm.test(\"Check that proper Collections are returned\", function () {\r",
													"//     pm.expect(jsonData.name).to.match(regex);\r",
													"//     // console.log(\"checking \" + jsonData.name + \" against regex \" + collectionMatchString + \".\" ); \r",
													"// });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "assets",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "grants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "owners"
												},
												{
													"key": "projection",
													"value": "statistics"
												},
												{
													"key": "projection",
													"value": "stigs"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{deleteCollection}}",
													"description": "(Required) A path parameter that indentifies a Collection"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user != \"stigmanadmin\" && user != \"elevated\" && user != \"collectioncreator\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), and collectioncreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201); //AZDO #157 status should be 201\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"description\": \"Collection TEST description\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Put\",\n  \"pocEmail\": \"pocEmailPut@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": \"true\"\n  },\n    \"grants\": [\n\n        {\n                \"userId\": \"1\",\n            \"accessLevel\": 4\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=grants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "grants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "owners"
										},
										{
											"key": "projection",
											"value": "statistics"
										},
										{
											"key": "projection",
											"value": "grants"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Asset PPPD",
					"item": [
						{
							"name": "{asset Id}",
							"item": [
								{
									"name": "stigs",
									"item": [
										{
											"name": "{benchmark Id}",
											"item": [
												{
													"name": "Delete a STIG assignment to an Asset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/assets/:assetId/stigs/:benchmarkId?elevate={{elevated}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"assets",
																":assetId",
																"stigs",
																":benchmarkId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																}
															],
															"variable": [
																{
																	"key": "assetId",
																	"value": "{{scrapAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "benchmarkId",
																	"value": "{{scrapBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete all STIG assignments to an Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an empty array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"    pm.expect(jsonData).to.have.lengthOf(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/assets/:assetId/stigs?elevate={{elevated}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"assets",
														":assetId",
														"stigs"
													],
													"query": [
														{
															"key": "elevate",
															"value": "{{elevated}}",
															"description": "Elevate the user context for this request if user is permitted (canAdmin)"
														}
													],
													"variable": [
														{
															"key": "assetId",
															"value": "{{scrapAsset}}",
															"description": "(Required) A path parameter that indentifies an Asset"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Merge provided properties with an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\",\n        \"RHEL_7_STIG\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\",\n        \"RHEL_7_STIG\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{scrapAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
													"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "adminStats",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigGrants"
												}
											],
											"variable": [
												{
													"key": "assetId",
													"value": "{{deleteAsset}}",
													"description": "(Required) A path parameter that indentifies an Asset"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionId\": \"{{scrapCollection}}\",\n    \"description\": \"test desc\",\n    \"ip\": \"1.1.1.1\",\n    \"noncomputing\": true,\n    \"metadata\": {},\n    \"stigs\": [\n        \"VPN_SRG\",\n        \"Windows_10_STIG\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?elevate={{elevated}}&projection=adminStats&projection=stigs&projection=stigGrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "adminStats",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews PPPD",
					"item": [
						{
							"name": "reviews",
							"item": [
								{
									"name": "{asset Id}",
									"item": [
										{
											"name": "{rule Id}",
											"item": [
												{
													"name": "Set all properties of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectionCreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectionCreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set all properties of a Review - with metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\",\n    \"metadata\": {\n        \"{{metadataKey}}\":\"{{metadataValue}}\"\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set all metadata of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200 for all users except collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"{{testMetadataKey}}\":\"{{testMetadataValue}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Set one metadata key/value of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 204 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 204) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"{{metadataValue}}\""
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Delete one metadata key/value of a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 204 for all users but collectioncreator\", function () {\r",
																	"        pm.response.to.have.status(204);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 204) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"{{metadataValue}}\""
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata/keys/:key",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata",
																"keys",
																":key"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																},
																{
																	"key": "key",
																	"value": "{{testMetadataKey}}"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Merge metadata property/value into a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"{{testMetadataKey}}\":\"{{metadataValue}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId/metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId",
																"metadata"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "stigs",
																	"disabled": true
																},
																{
																	"key": "projection",
																	"value": "metadata",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
													},
													"response": []
												},
												{
													"name": "Merge provided properties with a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs&projection=metadata",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																},
																{
																	"key": "projection",
																	"value": "metadata"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														},
														"description": "Update the given properties of a Review, if it exists"
													},
													"response": []
												},
												{
													"name": "Delete a Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"// START AZDO #154\r",
																	"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an object\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('object');\r",
																	"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
																	"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
																	"\r",
																	"});\r",
																	"// END AZDO #154\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate={{elevated}}&projection=rule&projection=history&projection=stigs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"collections",
																":collectionId",
																"reviews",
																":assetId",
																":ruleId"
															],
															"query": [
																{
																	"key": "elevate",
																	"value": "{{elevated}}",
																	"description": "Elevate the user context for this request if user is permitted (canAdmin)"
																},
																{
																	"key": "projection",
																	"value": "rule",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "history",
																	"description": "Additional properties to include in the response.\n"
																},
																{
																	"key": "projection",
																	"value": "stigs"
																}
															],
															"variable": [
																{
																	"key": "collectionId",
																	"value": "{{testCollection}}",
																	"description": "(Required) A path parameter that indentifies a Collection"
																},
																{
																	"key": "assetId",
																	"value": "{{testAsset}}",
																	"description": "(Required) A path parameter that indentifies an Asset"
																},
																{
																	"key": "ruleId",
																	"value": "{{testRuleId}}",
																	"description": "(Required) A path parameter that indentifies a Rule"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Import one or more Reviews from a JSON body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an object\", function () {\r",
															"    pm.expect(jsonData).to.be.an('object');\r",
															"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
															"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "{{testCollection}}"
														},
														{
															"key": "assetId",
															"value": "{{testAsset}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users PPD",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Merge provided properties with a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for user that is elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code != 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\",\r",
													"    \"lastClaims\",\r",
													"    \"collectionGrantCount\"\r",
													"]\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    let scrapLvl1 = pm.environment.get(\"scrapLvl1\");\r",
													"    pm.expect(jsonData.userId).to.eql(scrapLvl1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set all properties of a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"\r",
													"\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\",\r",
													"    \"lastClaims\",\r",
													"    \"collectionGrantCount\"\r",
													"]\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													"pm.test(\"Check if object contains info for expected user\", function () {\r",
													"    let scrapLvl1 = pm.environment.get(\"scrapLvl1\");\r",
													"    pm.expect(jsonData.userId).to.eql(scrapLvl1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"bizarroLvl1\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "privileges",
													"description": "Additional properties to include in the response.\n",
													"disabled": true
												},
												{
													"key": "projection",
													"value": "statistics"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{scrapLvl1}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for users not elevated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});\r",
													"\r",
													"let userKeys = [\r",
													"    \"userId\",\r",
													"    \"username\",\r",
													"    \"collectionGrants\",\r",
													"    \"statistics\"\r",
													"]\r",
													"\r",
													"\r",
													"let collectionGrantKeys = [\r",
													"    \"collection\",\r",
													"    \"accessLevel\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let collectionKeys = [\r",
													"    \"name\",\r",
													"    \"collectionId\",\r",
													"    // \"userId\",\r",
													"    // \"username\"\r",
													"]\r",
													"let statisticsKeys = [\r",
													"    \"created\",\r",
													"    \"lastAccess\",\r",
													"    \"lastClaims\",\r",
													"    \"collectionGrantCount\"\r",
													"]\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains all required keys\", function () {\r",
													"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
													"});\r",
													"\r",
													"for (let grant of jsonData.collectionGrants){\r",
													"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
													"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
													"}\r",
													"\r",
													"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
													"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "collectionGrants",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "statistics",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{deleteUser}}",
													"description": "(Required) A path parameter that indentifies a User"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be 201 for elevated users\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status should be 403 for non-elevated users\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 201) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let userKeys = [\r",
											"    \"userId\",\r",
											"    \"username\",\r",
											"    \"collectionGrants\",\r",
											"    \"statistics\"\r",
											"]\r",
											"\r",
											"\r",
											"let collectionGrantKeys = [\r",
											"    \"collection\",\r",
											"    \"accessLevel\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let collectionKeys = [\r",
											"    \"name\",\r",
											"    \"collectionId\",\r",
											"    // \"userId\",\r",
											"    // \"username\"\r",
											"]\r",
											"let statisticsKeys = [\r",
											"    \"created\",\r",
											"    \"lastAccess\",\r",
											"    \"lastClaims\",\r",
											"    \"collectionGrantCount\"\r",
											"]\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains all required keys\", function () {\r",
											"    pm.expect(jsonData).to.have.all.keys(userKeys);\r",
											"});\r",
											"\r",
											"for (let grant of jsonData.collectionGrants){\r",
											"    pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
											"    pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
											"}\r",
											"\r",
											"pm.test(\"Check if object contains all required statistics keys\", function () {\r",
											"    pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"TEST_USER_{{$randomNoun}}-{{$randomJobType}}\",\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"{{scrapCollection}}\",\n            \"accessLevel\": 1\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=collectionGrants&projection=statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "username",
											"value": "wat",
											"description": "A query parameter that filters on a username",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "collectionGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "privileges",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "statistics"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "op PPPD",
					"item": [
						{
							"name": "appdata",
							"item": [
								{
									"name": "Import and overwrite application data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data Elevate = false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "false",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data ZIP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import and overwrite application data JSON BODY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let response = pm.response.text();\r",
													"console.log(response)\r",
													"\r",
													"pm.test(\"Body contains string\",() => {\r",
													"  pm.expect(response).to.include(\"Commit successful\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"type": "file",
													"src": "./{{formDataFiles}}/{{appDataFile}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/op/appdata?elevate={{elevated}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"op",
												"appdata"
											],
											"query": [
												{
													"key": "elevate",
													"value": "{{elevated}}",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "Requests that alter data"
		},
		{
			"name": "STIGS",
			"item": [
				{
					"name": "stigs GET",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "groups",
													"item": [
														{
															"name": "Return the list of groups for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"//START AZDO #115\r",
																			"\r",
																			"// let user = pm.environment.get(\"user\");\r",
																			"// console.log(\"user: \" + user);\r",
																			"\r",
																			"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"//     user = \"elevated\";\r",
																			"//     console.log(\"setting user to 'elevated'\");\r",
																			"// }\r",
																			"\r",
																			"// if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"//     pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"//         pm.response.to.have.status(403);\r",
																			"//     });\r",
																			"//     return;\r",
																			"// }\r",
																			"// else {\r",
																			"//     pm.test(\"Status code is 200\", function () {\r",
																			"//         pm.response.to.have.status(200);\r",
																			"//     });\r",
																			"// }\r",
																			"// if (pm.response.code !== 200) {\r",
																			"//     return;\r",
																			"// }\r",
																			"\r",
																			"\r",
																			"// let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"// pm.test(\"Response JSON is an array\", function () {\r",
																			"//     pm.expect(jsonData).to.be.an('array');\r",
																			"// });\r",
																			"//END AZDO #115\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return the rules, checks and fixes for a Group from a specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"//START AZDO #115\r",
																			"// let user = pm.environment.get(\"user\");\r",
																			"// console.log(\"user: \" + user);\r",
																			"\r",
																			"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"//     user = \"elevated\";\r",
																			"//     console.log(\"setting user to 'elevated'\");\r",
																			"// }\r",
																			"\r",
																			"// if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"//     pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"//         pm.response.to.have.status(403);\r",
																			"//     });\r",
																			"//     return;\r",
																			"// }\r",
																			"// else {\r",
																			"//     pm.test(\"Status code is 200\", function () {\r",
																			"//         pm.response.to.have.status(200);\r",
																			"//     });\r",
																			"// }\r",
																			"// if (pm.response.code !== 200) {\r",
																			"//     return;\r",
																			"// }\r",
																			"\r",
																			"\r",
																			"// let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"// pm.test(\"Response JSON is an object\", function () {\r",
																			"//     pm.expect(jsonData).to.be.an('object');\r",
																			"// });\r",
																			"//END AZDO #115\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/groups/:groupId?projection=rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"groups",
																		":groupId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "rules",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "<string>",
																			"description": "Additional properties to include in the response.\n",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "groupId",
																			"value": "{{testGroupId}}",
																			"description": "(Required) A path parameter that indentifies a Group"
																		}
																	]
																},
																"description": "None"
															},
															"response": []
														}
													]
												},
												{
													"name": "rules",
													"item": [
														{
															"name": "Return rule data for the specified revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=detail&projection=ccis&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return rule data for the LATEST revision of a STIG",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an array\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('array');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules?projection=detail&projection=ccis&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "latest",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Return rule data for the specified Rule in a revision of a STIG.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let user = pm.environment.get(\"user\");\r",
																			"console.log(\"user: \" + user);\r",
																			"\r",
																			"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																			"    user = \"elevated\";\r",
																			"    console.log(\"setting user to 'elevated'\");\r",
																			"}\r",
																			"\r",
																			"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																			"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																			"        pm.response.to.have.status(403);\r",
																			"    });\r",
																			"    return;\r",
																			"}\r",
																			"else {\r",
																			"    pm.test(\"Status code is 200\", function () {\r",
																			"        pm.response.to.have.status(200);\r",
																			"    });\r",
																			"}\r",
																			"if (pm.response.code !== 200) {\r",
																			"    return;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"let jsonData = pm.response.json();\r",
																			"\r",
																			"\r",
																			"pm.test(\"Response JSON is an object\", function () {\r",
																			"    pm.expect(jsonData).to.be.an('object');\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/rules/:ruleId?projection=detail&projection=ccis&projection=checks&projection=fixes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"stigs",
																		":benchmarkId",
																		"revisions",
																		":revisionStr",
																		"rules",
																		":ruleId"
																	],
																	"query": [
																		{
																			"key": "projection",
																			"value": "detail",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "ccis",
																			"description": "Additional properties to include in the response.\n"
																		},
																		{
																			"key": "projection",
																			"value": "checks"
																		},
																		{
																			"key": "projection",
																			"value": "fixes"
																		}
																	],
																	"variable": [
																		{
																			"key": "benchmarkId",
																			"value": "{{testBenchmark}}",
																			"description": "(Required) A path parameter that indentifies a STIG"
																		},
																		{
																			"key": "revisionStr",
																			"value": "{{testRev}}",
																			"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																		},
																		{
																			"key": "ruleId",
																			"value": "{{testRuleId}}",
																			"description": "(Required) A path parameter that indentifies a Rule"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Return metadata for the specified revision of a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// START AZDO #116\r",
																	"// let user = pm.environment.get(\"user\");\r",
																	"// console.log(\"user: \" + user);\r",
																	"\r",
																	"// if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"//     user = \"elevated\";\r",
																	"//     console.log(\"setting user to 'elevated'\");\r",
																	"// }\r",
																	"\r",
																	"// if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"//     pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"//         pm.response.to.have.status(403);\r",
																	"//     });\r",
																	"//     return;\r",
																	"// }\r",
																	"// else {\r",
																	"//     pm.test(\"Status code is 200\", function () {\r",
																	"//         pm.response.to.have.status(200);\r",
																	"//     });\r",
																	"// }\r",
																	"// if (pm.response.code !== 200) {\r",
																	"//     return;\r",
																	"// }\r",
																	"\r",
																	"\r",
																	"// let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"// pm.test(\"Response JSON is an object\", function () {\r",
																	"//     pm.expect(jsonData).to.be.an('object');\r",
																	"// });\r",
																	"// END AZDO #116\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Return a list of CCIs from a STIG revision",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//START AZDO #117\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
																	"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"    return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let jsonData = pm.response.json();\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response JSON is an array\", function () {\r",
																	"    pm.expect(jsonData).to.be.an('array');\r",
																	"});\r",
																	"//END AZDO #117\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr/ccis",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr",
																"ccis"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Return a list of revisions for the specified STIG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"user\");\r",
															"console.log(\"user: \" + user);\r",
															"\r",
															"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
															"    user = \"elevated\";\r",
															"    console.log(\"setting user to 'elevated'\");\r",
															"}\r",
															"\r",
															"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
															"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
															"        pm.response.to.have.status(403);\r",
															"    });\r",
															"    return;\r",
															"}\r",
															"else {\r",
															"    pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"}\r",
															"if (pm.response.code !== 200) {\r",
															"    return;\r",
															"}\r",
															"\r",
															"\r",
															"let jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Response JSON is an array\", function () {\r",
															"    pm.expect(jsonData).to.be.an('array');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stigs",
														":benchmarkId",
														"revisions"
													],
													"variable": [
														{
															"key": "benchmarkId",
															"value": "{{testBenchmark}}",
															"description": "(Required) A path parameter that indentifies a STIG"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Return properties of the specified STIG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
													"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Response JSON is an object\", function () {\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{testBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Return a list of available STIGs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "<string>",
											"description": "A string found anywhere in a STIG title",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return a list of available STIGs NAME FILTER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs?title=vpn",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									],
									"query": [
										{
											"key": "title",
											"value": "vpn",
											"description": "A string found anywhere in a STIG title"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the defintion and associated checks and fixes for the specified Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// START AZDO #118\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"// END AZDO #118\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/rules/:ruleId?projection=detail&projection=ccis&projection=checks&projection=fixes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"rules",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "detail",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "ccis",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "checks"
										},
										{
											"key": "projection",
											"value": "fixes"
										}
									],
									"variable": [
										{
											"key": "ruleId",
											"value": "{{testRuleId}}",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return data for the specified CCI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//START AZDO #117\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"//END AZDO #117\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/ccis/:cci?projection=stigs&projection=references&projection=emassAp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										"ccis",
										":cci"
									],
									"variable": [
										{
											"key": "cci",
											"value": "{{testCci}}",
											"description": "(Required) A path parameter that indentifies a CCI"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "stigs PPPD",
					"item": [
						{
							"name": "{benchmark Id}",
							"item": [
								{
									"name": "revisions",
									"item": [
										{
											"name": "{revision Str}",
											"item": [
												{
													"name": "Deletes the specified revision of a STIG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"//START AZDO #119\r",
																	"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
																	"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"    // return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403 for all other users\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 200) {\r",
																	"    return;\r",
																	"}\r",
																	"//END AZDO #119\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "{{testRev}}",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Deletes the specified revision of a STIG latest",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"let user = pm.environment.get(\"user\");\r",
																	"console.log(\"user: \" + user);\r",
																	"\r",
																	"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
																	"    user = \"elevated\";\r",
																	"    console.log(\"setting user to 'elevated'\");\r",
																	"}\r",
																	"\r",
																	"//START AZDO #119\r",
																	"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
																	"    pm.test(\"Status should be is 400 for user stigmanadmin\", function () {\r",
																	"        pm.response.to.have.status(400);\r",
																	"    });\r",
																	"    // return;\r",
																	"}\r",
																	"else {\r",
																	"    pm.test(\"Status code is 403 for all other users\", function () {\r",
																	"        pm.response.to.have.status(403);\r",
																	"    });\r",
																	"}\r",
																	"if (pm.response.code !== 400) {\r",
																	"    return;\r",
																	"}\r",
																	"//END AZDO #119\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stigs/:benchmarkId/revisions/:revisionStr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stigs",
																":benchmarkId",
																"revisions",
																":revisionStr"
															],
															"variable": [
																{
																	"key": "benchmarkId",
																	"value": "{{testBenchmark}}",
																	"description": "(Required) A path parameter that indentifies a STIG"
																},
																{
																	"key": "revisionStr",
																	"value": "latest",
																	"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} ]"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Deletes a STIG (*** and all revisions ***)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"    console.log(\"setting user to 'elevated'\");\r",
													"}\r",
													"\r",
													"if (user == \"stigmanadmin\" || user == \"elevated\" ) { \r",
													"    pm.test(\"Status should be is 200 for user stigmanadmin\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    // return;\r",
													"}\r",
													"else {\r",
													"    pm.test(\"Status code is 403 for all other users\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"if (pm.response.code !== 200) {\r",
													"    return;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stigs/:benchmarkId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stigs",
												":benchmarkId"
											],
											"variable": [
												{
													"key": "benchmarkId",
													"value": "{{scrapBenchmark}}",
													"description": "(Required) A path parameter that indentifies a STIG"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Import a new STIG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"currentGroupRule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{testStigFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LVL1 cross-boundary tests",
			"item": [
				{
					"name": "Import a new STIG - VPN  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{vpnStig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import a new STIG - Win 10  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{win10Stig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import a new STIG - RHEL 7 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "replace",
									"value": "true",
									"description": " (This can only be one of true,false)",
									"type": "text"
								},
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{rhel7Stig}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import and overwrite application data (as elevated Admin) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "importFile",
									"type": "file",
									"src": "./{{formDataFiles}}/{{appDataFile}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/op/appdata?elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"op",
								"appdata"
							],
							"query": [
								{
									"key": "elevate",
									"value": "true",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the requester's user information - check user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let userKeys = [\r",
									"    \"userId\",\r",
									"    \"username\",\r",
									"    // \"display\",\r",
									"    // \"email\",\r",
									"    // \"metadata\",\r",
									"    // \"privileges\",\r",
									"    \"collectionGrants\",\r",
									"    \"statistics\"\r",
									"]\r",
									"let collectionGrantKeys = [\r",
									"    \"collection\",\r",
									"    \"accessLevel\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let collectionKeys = [\r",
									"    \"name\",\r",
									"    \"collectionId\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"let statisticsKeys = [\r",
									"    \"created\",\r",
									"    \"lastAccess\",\r",
									"    \"collectionGrantCount\",\r",
									"    \"lastClaims\"\r",
									"]\r",
									"let privilegesKeys = [\r",
									"    \"canAdmin\",\r",
									"    \"canCreateCollection\"\r",
									"]\r",
									"\r",
									"// START AZDO #151\r",
									"// pm.test(\"Check if object contains all required keys\", function () {\r",
									"//     pm.expect(jsonData).to.have.all.keys(userKeys);\r",
									"// });\r",
									"\r",
									"// for (let grant of jsonData.collectionGrants){\r",
									"//     pm.expect(grant).to.have.all.keys(collectionGrantKeys);\r",
									"//     pm.expect(grant.collection).to.have.all.keys(collectionKeys);\r",
									"// }\r",
									"\r",
									"// pm.test(\"Check if object contains all required privileges keys\", function () {\r",
									"//     pm.expect(jsonData.privileges).to.have.all.keys(privilegesKeys);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Check if object contains all required statistics keys\", function () {\r",
									"//     pm.expect(jsonData.statistics).to.have.all.keys(statisticsKeys);\r",
									"// });\r",
									"// STOP AZDO #151\r",
									"\r",
									"pm.test(\"Check if object contains info for expected user\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(user);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the Review for an Asset and Rule - expect fail for lvl1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" ) {\r",
									"    pm.test(\"Status should be 204 for user lvl1\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"let checklistLength = pm.environment.get(\"checklistLength\");\r",
									"\r",
									"pm.test(\"Check for an array of correct length.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').of.length(checklistLength);\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=history&projection=stigs&projection=rule&projection=metadata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "history"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "projection",
									"value": "rule"
								},
								{
									"key": "projection",
									"value": "metadata"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the STIGs mapped in the specified Collection - lvl1 - stigStats check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let stigKeys = [\r",
									"    \"title\",\r",
									"    \"ruleCount\",\r",
									"    \"benchmarkId\",\r",
									"    \"lastRevisionDate\",\r",
									"    \"lastRevisionStr\",\r",
									"    \"assetCount\",\r",
									"    \"acceptedCount\",\r",
									"    \"submittedCount\",\r",
									"    \"savedCount\"\r",
									"]\r",
									"\r",
									"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
									"\r",
									"pm.test(\"Response has requested properties and values\", function () {\r",
									"    for (let stig of jsonData){\r",
									"        pm.expect(stig).to.have.all.keys(stigKeys);\r",
									"        pm.expect(stig.benchmarkId).to.be.oneOf(validStigs);\r",
									"        pm.expect(stig.ruleCount).to.equal(81);\r",
									"        pm.expect(stig.submittedCount).to.equal(7);\r",
									"\r",
									"    };\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return an Asset (lvl1 user requests w/ 1 of 2 stig grants, check proper AdminStats)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//normal test start block:\r",
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"xxxxx\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for user xxxxx\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let assetKeys = [\r",
									"    \"assetId\",\r",
									"    \"name\",\r",
									"    \"fqdn\",\r",
									"    \"collection\",\r",
									"    \"description\",\r",
									"    \"ip\",\r",
									"    \"mac\",\r",
									"    \"noncomputing\",\r",
									"    \"metadata\"\r",
									"]\r",
									"\r",
									"let collectionKeys = [\r",
									"    \"collectionId\",\r",
									"    \"name\",\r",
									"    \"workflow\"\r",
									"]\r",
									"\r",
									"let grantKeys = [\r",
									"    \"users\",\r",
									"    \"benchmarkId\",\r",
									"    // \"userId\",\r",
									"    // \"username\"\r",
									"]\r",
									"\r",
									"let userBasicKeys = [\r",
									"    // \"user\",\r",
									"    // \"accessLevel\",\r",
									"    \"userId\",\r",
									"    \"username\"\r",
									"]\r",
									"\r",
									"let stigKeys = [\r",
									"    \"title\",\r",
									"    \"ruleCount\",\r",
									"    \"benchmarkId\",\r",
									"    \"lastRevisionDate\",\r",
									"    \"lastRevisionStr\"\r",
									"]\r",
									"\r",
									"let adminStatsKeys = [\r",
									"    \"ruleCount\",\r",
									"    \"stigCount\",\r",
									"    \"stigAssignedCount\",\r",
									"    \"savedCount\",\r",
									"    \"acceptedCount\",\r",
									"    \"submittedCount\"\r",
									"]\r",
									"\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
									"    assetKeys.push(\"adminStats\")\r",
									"}\r",
									"if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
									"    assetKeys.push(\"stigGrants\")\r",
									"}\r",
									"if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
									"    assetKeys.push(\"stigs\")\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if object contains all provided keys\", function () {\r",
									"    pm.expect(jsonData).to.have.all.keys(assetKeys);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has requested properties and values\", function () {\r",
									"    // for (let item of jsonData){\r",
									"    // let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
									"    // var regex = new RegExp(collectionMatchString);\r",
									"    // pm.test(\"Check that proper Collections are returned\", function () {\r",
									"    //     pm.expect(jsonData.name).to.match(regex);\r",
									"    // });\r",
									"\r",
									"    // pm.expect(jsonData.collection).to.have.all.keys(collectionKeys);\r",
									"\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
									"        for (let grant of jsonData.stigGrants){\r",
									"            pm.expect(grant).to.have.all.keys(grantKeys);\r",
									"            for (let user of grant.users){\r",
									"                pm.expect(user).to.have.all.keys(userBasicKeys);\r",
									"\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=stigs/)) {\r",
									"        for (let stig of jsonData.stigs){\r",
									"            pm.expect(stig).to.have.all.keys(stigKeys);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
									"            pm.expect(jsonData.adminStats).to.have.all.keys(adminStatsKeys);\r",
									"\r",
									"    }\r",
									"\r",
									"    if (pm.request.url.getQueryString().match(/projection=adminStats/)) {\r",
									"            //check for proper adminStat counts for lvl1 user\r",
									"            pm.expect(jsonData.adminStats.ruleCount).to.equal(81);\r",
									"            pm.expect(jsonData.adminStats.submittedCount).to.equal(5);\r",
									"    }\r",
									"    // };\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?projection=adminStats&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "adminStats",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigGrants",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return an Asset (lvl1 user requests w/ ZERO of 2 stig grants, expect fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//normal test start block:\r",
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for user lvl1\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?projection=adminStats&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "adminStats",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigGrants",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the Checklist for the supplied Collection and STIG-revStr - lvl1 no access, empty array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"collectioncreator\" || user == \"bizarroLvl1\" ) {\r",
									"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" ) {\r",
									"    pm.test(\"Status should be 200 with empty array for user lvl1\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"let checklistLength = pm.environment.get(\"checklistLength\");\r",
									"\r",
									"pm.test(\"Check for an array of correct length.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').of.length(0);\r",
									"    // console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/checklists/:benchmarkId/:revisionStr",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"checklists",
								":benchmarkId",
								":revisionStr"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "benchmarkId",
									"value": "Windows_10_STIG",
									"description": "(Required) A path parameter that indentifies a STIG"
								},
								{
									"key": "revisionStr",
									"value": "V2R1",
									"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - ADMIN - lvl1 asset access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"ADMIN POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"ADMIN POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - ADMIN - lvl1 no asset access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token.stigmanadmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"ADMIN POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"ADMIN POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "grants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "owners"
								},
								{
									"key": "projection",
									"value": "statistics"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Collection - expect fail for lvl1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectioncreator\" || user == \"globular\") { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"TEST_{{$randomNoun}}-{{$randomJobType}}\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n    \"pocName\": \"poc2Patched\",\n    \"pocEmail\": \"pocEmail@email.com\",\n    \"pocPhone\": \"12342\",\n    \"reqRar\": \"true\"\n  },\n    \"grants\": [\n        {\n          \"userId\": \"1\",\n          \"accessLevel\": 4\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?elevate={{elevated}}&projection=assets&projection=grants&projection=owners&projection=statistics&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "grants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "owners"
								},
								{
									"key": "projection",
									"value": "statistics"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{scrapCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 should work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
									"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"test\\nvisible to lvl1\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Review - lvl1 test - noAssetAccess - w admin request check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 PATCHED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 PATCHED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Update the given properties of a Review, if it exists"
					},
					"response": []
				},
				{
					"name": "Merge provided properties with a Review - lvl1 test - no STIG-Asset Access - w admin request check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 PATCHED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 PATCHED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Update the given properties of a Review, if it exists"
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for this test\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.permitted).to.have.lengthOf(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no Asset Access - multiple posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be is 200 for lvl1, with all reviews rejected\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.permitted).to.have.lengthOf(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(2);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let ruleIdAllowed = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review for Rule without lvl1 access\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for lvl1, with all reviews rejected \", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.permitted).to.have.lengthOf(0);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import one or more Reviews from a JSON body - no STIG-Asset Access - multiple reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"if ( user == \"lvl1\" ) { //placeholder for \"users\" that should fail\r",
									"    pm.test(\"Status should be 200 for lvl1, with all reviews rejected \", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"if (pm.response.code !== 200) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response JSON is an object, with component arrays of proper length\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData.permitted).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData.rejected).to.have.lengthOf(1);\r",
									"\r",
									"});\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let ruleIdAllowed = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting review that should not have changed', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 POSTED THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"ruleId\": \"{{testRuleId}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS(legally!)\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    },\n    {\n    \"ruleId\": \"{{testRuleId-lvl1NoAccess}}\",\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 POSTED THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId"
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 test - no Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset-lvl1NoAccess\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 PUT THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 PUT THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Set all properties of a Review - lvl1 test - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// let baseUrl = pm.environment.get(\"baseUrl\");\r",
									"// let assetId = pm.environment.get(\"testAsset\");\r",
									"// let ruleId = pm.environment.get(\"testRuleId-lvl1NoAccess\");\r",
									"// let collectionId = pm.environment.get(\"testCollection\");\r",
									"// let stigmanadmin = pm.environment.get(\"token.stigmanadmin\");\r",
									"// console.log(baseUrl)\r",
									"\r",
									"// const postRequest = {\r",
									"//   url: `${baseUrl}/collections/${collectionId}/reviews/${assetId}/${ruleId}`,\r",
									"//   method: 'GET',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'X-Foo': 'bar',\r",
									"//     'Authorization': `Bearer ${stigmanadmin}`\r",
									"//   }\r",
									"// };\r",
									"\r",
									"// pm.sendRequest(postRequest, (error, response) => {\r",
									"//   if (error) {\r",
									"//     console.log(error);\r",
									"//   }\r",
									"\r",
									"//   pm.test('admin requesting same review', () => {\r",
									"//     pm.expect(error).to.equal(null);\r",
									"//     pm.expect(response).to.have.property('code', 200);\r",
									"//     pm.expect(response).to.have.property('status', 'OK');\r",
									"//   });\r",
									"\r",
									"//     let adminCheckJsonData = response.json();\r",
									"\r",
									"\r",
									"//     pm.test(\"admin user checking to see if this request altered review\", function () {\r",
									"//         pm.expect(adminCheckJsonData).to.be.an('object');\r",
									"//         pm.expect(adminCheckJsonData.resultComment).to.not.eql(\"LVL1 PUT THIS\");\r",
									"\r",
									"//     });\r",
									"\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"result\": \"pass\",\n    \"resultComment\": \"LVL1 PUT THIS\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						},
						"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
					},
					"response": []
				},
				{
					"name": "Delete a Review - lvl1 test - noAssetAccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"//GITHUB ISSUE 94, indicating deleting of reviews not yet implemented\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Review - lvl1 test - no STIG-Asset Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"setting user to 'elevated'\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status should be is 403 for lvl1 user\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"//GITHUB ISSUE 94, indicating deleting of reviews not yet implemented\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews",
								":assetId",
								":ruleId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "history",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{testCollection}}",
									"description": "(Required) A path parameter that indentifies a Collection"
								},
								{
									"key": "assetId",
									"value": "{{testAsset}}",
									"description": "(Required) A path parameter that indentifies an Asset"
								},
								{
									"key": "ruleId",
									"value": "{{testRuleId-lvl1NoAccess}}",
									"description": "(Required) A path parameter that indentifies a Rule"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token.lvl1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"    user = \"lvl1\";",
							"    elevate = false;",
							"    pm.environment.set(\"user\", user);",
							"    pm.environment.set(\"elevated\", elevate);",
							"    let token = pm.environment.get(\"token.\" + user)",
							"    pm.environment.set(\"token\", token);",
							"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
							"",
							"    return;  // Just use whatever settings are currently left in the env.",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Additional sundry tests",
			"item": [
				{
					"name": "LoadTestData",
					"item": [
						{
							"name": "Import a new STIG - VPN  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"currentGroupRule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{vpnStig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - Win 10  (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"currentGroupRule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{win10Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import a new STIG - RHEL 7 (as admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"stigmanadmin\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 only for stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"currentGroupRule\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "replace",
											"value": "true",
											"description": " (This can only be one of true,false)",
											"type": "text"
										},
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{rhel7Stig}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import and overwrite application data (as elevated Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if (user == \"elevated\") { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 200 for elevated stigmanadmin user\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let response = pm.response.text();\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Body contains string\",() => {\r",
											"  pm.expect(response).to.include(\"Commit successful\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"type": "file",
											"src": "./{{formDataFiles}}/{{appDataFile}}"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/op/appdata?elevate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"op",
										"appdata"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check that \"informational\" results are represented as NotReviewed with Finding Details data in .ckls",
					"item": [
						{
							"name": "Set all properties of a Review - informational + result comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"setting user to 'elevated'\");\r",
											"}\r",
											"\r",
											"if ( user == \"collectioncreator\" ) { //placeholder for \"users\" that should fail\r",
											"    pm.test(\"Status should be is 403 for all users except stigmanAdmin(elevated), lvl3 and lvl4\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    // pm.expect(jsonData).to.have.lengthOf.at.least(1);\r",
											"    // pm.expect(jsonData).to.have.lengthOf(1);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"informational\",\n    \"resultComment\": \"test\\nvisible to lvl1, THIS REVIEW IS INFORMATIONAL (but comes back as Not_Reviewed in a ckl)\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "21",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the Checklist for the supplied Asset and STIG XML (.ckl) - check that informational + resultComment exported as not_reviewed + finding_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"const xml2js = require('xml2js');\r",
											"\r",
											"\r",
											"if (user == \"bizarroLvl1\" ) {\r",
											"    pm.test(\"Status should be is 403 for user collectioncreator, bizarroLvl1\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else if (user == \"collectioncreator\" ) {\r",
											"    pm.test(\"Status should be is 204 for user collectioncreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code !== 200) {\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let cklData;\r",
											"\r",
											" xml2js.parseString(pm.response.text(), function (err, result) {\r",
											"        cklData = result;\r",
											"        // console.log(result);\r",
											"    });\r",
											"\r",
											"\r",
											"let cklHostName = cklData.CHECKLIST.ASSET[0].HOST_NAME[0]\r",
											"let cklIStigs = cklData.CHECKLIST.STIGS[0].iSTIG\r",
											"// let cklSiData = cklData.CHECKLIST.STIGS[0].iSTIG[0].STIG_INFO[0].SI_DATA\r",
											"// console.log(cklSiData);\r",
											"\r",
											"\r",
											"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"pm.test(\"Response has allowed asset\", function () {\r",
											"\r",
											"    var regex = new RegExp(assetMatchString);\r",
											"    pm.expect(cklHostName).to.match(regex);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"let validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"let currentStigId;\r",
											"\r",
											"pm.test(\"Check each iSTIG for STIG Info element with allowed stigId, as well as vulns array of proper length. Then check for Informational review masquerading as Not_Reviewed in the ckl.\", function () {\r",
											"\r",
											"    for (let iStig of cklIStigs){\r",
											"\r",
											"        for (let cklSiDatum of iStig.STIG_INFO[0].SI_DATA){\r",
											"            // console.log (cklSiDatum.SID_NAME[0])\r",
											"            if (cklSiDatum.SID_NAME[0] == 'stigid'){\r",
											"                console.log (cklSiDatum.SID_NAME[0])\r",
											"                console.log (cklSiDatum.SID_DATA[0])\r",
											"                currentStigId = cklSiDatum.SID_DATA[0]\r",
											"                pm.expect(currentStigId).to.be.oneOf(validStigs);\r",
											"\r",
											"            }\r",
											"        }\r",
											"\r",
											"        let cklVulns = iStig.VULN;\r",
											"\r",
											"        pm.expect(cklVulns).to.be.an('array');\r",
											"\r",
											"        // Right now, only VPN_SRG has a checklist length\r",
											"        if (currentStigId == 'VPN_SRG') {\r",
											"            let checklistLength = pm.environment.get(\"checklistLength\");\r",
											"            pm.expect(cklVulns).to.be.an('array').of.length(checklistLength);\r",
											"\r",
											"            for (let thisVuln of cklVulns){\r",
											"                for (let stigData of thisVuln.STIG_DATA){\r",
											"                    // console.log(stigData.VULN_ATTRIBUTE)\r",
											"                    // if (stigData.VULN_ATTRIBUTE)\r",
											"                    if (stigData.ATTRIBUTE_DATA[0] == 'SV-106179r1_rule'){\r",
											"                        console.log(stigData.VULN_ATTRIBUTE)\r",
											"                        console.log(thisVuln.FINDING_DETAILS[0])\r",
											"                        // pm.expect(thisVuln.FINDING_DETAILS[0]).to.be.an('array').of.length(checklistLength);\r",
											"                        var commentRegex = new RegExp(\"INFORMATIONAL\");\r",
											"                        var statusRegex = new RegExp(\"Not_Reviewed\");\r",
											"                        pm.expect(thisVuln.FINDING_DETAILS[0]).to.match(commentRegex);\r",
											"                        pm.expect(thisVuln.STATUS[0]).to.match(statusRegex);\r",
											"                    }\r",
											"\r",
											"                }\r",
											"            }\r",
											"\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?format=ckl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "format",
											"value": "ckl",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "VPN_SRG",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"key": "revisionStr",
											"value": "V1R1",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set all properties of a Review - invalid result enum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"    pm.test(\"Status should be is 400 for all users\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token.stigmanadmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"INVALID\",\n    \"resultComment\": \"test\\nvisible to lvl1, test of invalid result enum\",\n    \"action\": \"mitigate\",\n    \"actionComment\": \"sure\",\n    \"autoResult\": false,\n    \"status\": \"submitted\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=rule&projection=history&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "21",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "42",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"key": "ruleId",
											"value": "SV-106179r1_rule",
											"description": "(Required) A path parameter that indentifies a Rule"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "These tests should be self contained, provide their own authorization, and repopulate test data if required.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"curUser\", \"staff\");",
					"",
					"let user = pm.iterationData.get(\"user\");",
					"let elevate = pm.iterationData.get(\"elevate\");",
					"console.log(`user: ${user} elevate: ${elevate}`);",
					"",
					"",
					"//default to stigmanadmin user, elevated, if not iterating, and user is not in env",
					"if (user === undefined) {",
					"    user = \"stigmanadmin\";",
					"    elevate = true;",
					"    pm.environment.set(\"user\", user);",
					"    pm.environment.set(\"elevated\", elevate);",
					"    let token = pm.environment.get(\"token.\" + user)",
					"    pm.environment.set(\"token\", token);",
					"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"    return;  // Just use whatever settings are currently left in the env.",
					"}",
					"",
					"",
					"",
					"let token = pm.iterationData.get(\"token\");",
					"pm.environment.set(\"token.\"+ user, token);",
					"pm.environment.set(\"token\", token);",
					"pm.environment.set(\"user\", user);",
					"pm.environment.set(\"elevated\", elevate);",
					"console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"//constructed data targets to test",
					"pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
					"pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
					"pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
					"pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
					"pm.environment.set(\"testAsset\", pm.iterationData.get(\"testAsset\"));",
					"pm.environment.set(\"testAsset-NoStigs\", pm.iterationData.get(\"testAsset-NoStigs\"));",
					"pm.environment.set(\"testAssetName\", pm.iterationData.get(\"testAssetName\"));",
					"pm.environment.set(\"testRuleId\", pm.iterationData.get(\"testRuleId\"));",
					"pm.environment.set(\"testUserId\", pm.iterationData.get(\"testUserId\"));",
					"pm.environment.set(\"metadataKey\", pm.iterationData.get(\"metadataKey\"));",
					"pm.environment.set(\"metadataValue\", pm.iterationData.get(\"metadataValue\"));",
					"// pm.environment.set(\"targetCollectionName\", pm.iterationData.get(\"targetCollectionName\"));",
					"pm.environment.set(\"checklistLength\", pm.iterationData.get(\"checklistLength\"));",
					"",
					"//targets for data changes",
					"pm.environment.set(\"deleteAsset\", pm.iterationData.get(\"deleteAsset\"));",
					"pm.environment.set(\"scrapAsset\", pm.iterationData.get(\"scrapAsset\"));",
					"pm.environment.set(\"deleteCollection\", pm.iterationData.get(\"deleteCollection\"));",
					"pm.environment.set(\"scrapCollection\", pm.iterationData.get(\"scrapCollection\"));",
					"",
					"",
					"//regex strings",
					"pm.environment.set(\"collectionMatchString\", pm.iterationData.get(\"collectionMatchString\"));",
					"pm.environment.set(\"collectionMatchType\", pm.iterationData.get(\"collectionMatchType\"));",
					"pm.environment.set(\"assetMatchString\", pm.iterationData.get(\"assetMatchString\"));",
					"pm.environment.set(\"reviewMatchString\", pm.iterationData.get(\"reviewMatchString\"));",
					"",
					"//misc",
					"pm.environment.set(\"accessLevel\", pm.iterationData.get(\"accessLevel\"));",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// var user = pm.environment.get(\"user\");",
					"// var elevated = pm.environment.get(\"elevated\");",
					"",
					"// pm.test(`Collections Tests with user: ${user} elevated: ${elevated} `, function () {",
					"//     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
					"// });",
					"",
					"",
					"let user = pm.environment.get(\"user\");",
					"let elevated = pm.environment.get(\"elevated\");",
					"",
					"pm.test(`user: ${user}, elevate variable (not always used): ${elevated}`, function () {",
					"    pm.expect(1).to.equal(1);",
					"});",
					"",
					"let env = pm.environment.get(\"env\");",
					"pm.test(`environment: ${env}`, function () {",
					"    pm.expect(env).to.equal(\"STIGMan Env\");",
					"});",
					"",
					"",
					"",
					""
				]
			}
		}
	]
}